1
00:00:00,000 --> 00:00:03,430
>> [MUSIC PLAYING]

2
00:00:03,430 --> 00:00:05,702

3
00:00:05,702 --> 00:00:06,410
SPEAKER: Awesome.

4
00:00:06,410 --> 00:00:10,210
So today, I'm going to be
talking about Ruby on Rails.

5
00:00:10,210 --> 00:00:13,350
So, Ruby on Rails is a web framework.

6
00:00:13,350 --> 00:00:17,292
It's basically a way to make awesome
web apps, which a lot of you guys

7
00:00:17,292 --> 00:00:19,250
will probably be doing
for your final projects.

8
00:00:19,250 --> 00:00:23,370
>> So it's also cool timing,
because you're currently working

9
00:00:23,370 --> 00:00:25,202
in PHP for this current problem set.

10
00:00:25,202 --> 00:00:27,910
So, hopefully, a lot of these
things that I'm talking about today

11
00:00:27,910 --> 00:00:31,430
will ring some sorts
of bells, and there'll

12
00:00:31,430 --> 00:00:34,790
be some carryover between the stuff
you'll learn today, the stuff you're

13
00:00:34,790 --> 00:00:36,830
working on the problem sets.

14
00:00:36,830 --> 00:00:37,560
>> All right.

15
00:00:37,560 --> 00:00:40,480
So, what's on the agenda?

16
00:00:40,480 --> 00:00:45,020
First, we're going to go over a
review of MVC, model-view-controller.

17
00:00:45,020 --> 00:00:48,850
Hopefully, you've learned
about this some in lecture,

18
00:00:48,850 --> 00:00:51,390
but it'll be a review of that.

19
00:00:51,390 --> 00:00:54,210
>> Then we're going to talk
a little bit about Rails,

20
00:00:54,210 --> 00:00:59,180
which there are an infinite number
of things I could talk about.

21
00:00:59,180 --> 00:01:03,640
So we're going to go over some of the
basic, what is Rails, what does it do.

22
00:01:03,640 --> 00:01:07,040
>> And a little bit about Ruby
2, because Ruby on Rails is,

23
00:01:07,040 --> 00:01:09,320
not surprisingly, built in
a language called "Ruby."

24
00:01:09,320 --> 00:01:14,162
Luckily, Ruby is a lot more
intuitive than a lot of the languages

25
00:01:14,162 --> 00:01:15,120
you've been working in.

26
00:01:15,120 --> 00:01:17,670
So hopefully, it should
be pretty easy to pick up.

27
00:01:17,670 --> 00:01:23,080
>> And last, we're going to spend
time going over a basic web app,

28
00:01:23,080 --> 00:01:26,220
and digging into some code there.

29
00:01:26,220 --> 00:01:29,450
>> So, this is the official guide to MVC.

30
00:01:29,450 --> 00:01:32,870
This is what you'll find
on Study 50 and lectures.

31
00:01:32,870 --> 00:01:35,390
And MVC, obviously, has three parts.

32
00:01:35,390 --> 00:01:39,910
So there's the model, persistent
storage, managing and organizing data.

33
00:01:39,910 --> 00:01:43,690
You can think about this as your MySQL
database in the current problem set,

34
00:01:43,690 --> 00:01:45,087
any data files you have.

35
00:01:45,087 --> 00:01:47,920
There's the view, which is the
presentation of information, the user

36
00:01:47,920 --> 00:01:53,170
interface, and you can think
about these as HTML pages and any

37
00:01:53,170 --> 00:01:55,840
of the template pages you're
building on this problem set.

38
00:01:55,840 --> 00:01:59,160
And the controller, which
handles all of the information,

39
00:01:59,160 --> 00:02:04,030
kind of passes information between
the databases and the view.

40
00:02:04,030 --> 00:02:07,090
>> And you can think about these
as your current PHP files

41
00:02:07,090 --> 00:02:10,340
in the programs you're
writing for Problem Set 7.

42
00:02:10,340 --> 00:02:14,670
So I'm going to go into an unofficial
guide, which is inspired, actually,

43
00:02:14,670 --> 00:02:16,270
by last year's Ruby on Rails seminar.

44
00:02:16,270 --> 00:02:20,280
I really liked the way they kind of
thought about model-view-controller.

45
00:02:20,280 --> 00:02:23,220
So, let's go now, into
the unofficial guide.

46
00:02:23,220 --> 00:02:25,920
>> So, we have a couple characters
in the unofficial guide.

47
00:02:25,920 --> 00:02:32,150
There is our "model," Madeline, who
is very, very smart, loves data,

48
00:02:32,150 --> 00:02:34,525
knows all about data, but
she's a little bit anti-social,

49
00:02:34,525 --> 00:02:38,550
and she doesn't usually
interact much with people,

50
00:02:38,550 --> 00:02:41,910
unless she's told to do so.

51
00:02:41,910 --> 00:02:45,030
>> Next, there's our "view,"
Vicki, who is gorgeous.

52
00:02:45,030 --> 00:02:47,661
She's absolutely gorgeous,
but she's not so smart.

53
00:02:47,661 --> 00:02:49,160
And lastly there's our "controller."

54
00:02:49,160 --> 00:02:52,620
Hopefully, all of your controllers will
be less nefarious than this controller

55
00:02:52,620 --> 00:02:55,340
here, but this is our
evil queen, Caitlyn,

56
00:02:55,340 --> 00:02:57,930
who really likes ordering people
around, but doesn't really

57
00:02:57,930 --> 00:02:59,013
like doing things herself.

58
00:02:59,013 --> 00:03:01,610

59
00:03:01,610 --> 00:03:04,510
>> So, let's start with an analogy.

60
00:03:04,510 --> 00:03:06,630
Let's say all of our
characters work at CVS.

61
00:03:06,630 --> 00:03:08,610
There are two scenarios
we can think about.

62
00:03:08,610 --> 00:03:11,490
For some reason, I have Scenario 2,
Scenario 1, but that's all right,

63
00:03:11,490 --> 00:03:13,050
we'll start with Scenario 2.

64
00:03:13,050 --> 00:03:17,110
>> So, let's say a customer comes up to
CVS, and Vicki is working in the front.

65
00:03:17,110 --> 00:03:18,700
She's the cashier.

66
00:03:18,700 --> 00:03:20,829
So, the customer asks
Vicki for a piece of candy.

67
00:03:20,829 --> 00:03:23,870
You know how, in CVS there's always
that candy lined up in the front row.

68
00:03:23,870 --> 00:03:26,090
So a customer asks for that candy.

69
00:03:26,090 --> 00:03:27,260
What happens?

70
00:03:27,260 --> 00:03:32,680
>> Well, Vicki doesn't know what to
do, so she turns around and asks

71
00:03:32,680 --> 00:03:34,020
Caitlyn. "Caitlyn, what do I do?

72
00:03:34,020 --> 00:03:35,680
This customer just asked for candy."

73
00:03:35,680 --> 00:03:40,280
Caitlyn, our very controlling manager
says, "Well, the candy is right there,

74
00:03:40,280 --> 00:03:41,490
Vicki, just give it to them.

75
00:03:41,490 --> 00:03:44,804
And so Vicki says, "Oh, okay, good," She
hands the candy back to the customer.

76
00:03:44,804 --> 00:03:46,220
That's kind of our first scenario.

77
00:03:46,220 --> 00:03:48,750
So, in this case, we're not
even dealing with her model

78
00:03:48,750 --> 00:03:54,530
This is just, say, a user went and
clicked on a link to your web page.

79
00:03:54,530 --> 00:03:56,396
The view is stupid.

80
00:03:56,396 --> 00:03:59,270
It doesn't really know what to do,
so it has to go to the controller.

81
00:03:59,270 --> 00:04:01,220
It has to ask, "What do I
do with this information?"

82
00:04:01,220 --> 00:04:03,386
The controller then hands
back the appropriate page,

83
00:04:03,386 --> 00:04:04,920
and the view can display it.

84
00:04:04,920 --> 00:04:07,330
>> We now have a second
scenario, or our Scenario 1,

85
00:04:07,330 --> 00:04:11,170
in this case, where a customer
asks Vicki, the cashier,

86
00:04:11,170 --> 00:04:15,200
for a cup that's sitting in
the back, somewhere in storage.

87
00:04:15,200 --> 00:04:16,700
Now, again, Vicki says, "Oh my gosh.

88
00:04:16,700 --> 00:04:18,200
I have no idea what to do."

89
00:04:18,200 --> 00:04:21,240
>> She turns to Caitlyn, the
manager, she says, "Caitlyn,

90
00:04:21,240 --> 00:04:22,820
I have absolutely no idea what to do.

91
00:04:22,820 --> 00:04:24,920
They asked for a cup
this time, what do I do?"

92
00:04:24,920 --> 00:04:26,378
Caitlyn says, "All right, hang on."

93
00:04:26,378 --> 00:04:29,459
She turns around, yells
at Madeline, our model,

94
00:04:29,459 --> 00:04:31,500
she says, "Madeline, go
get a cut from the back."

95
00:04:31,500 --> 00:04:32,780
Madeleine says, "Okay, okay."

96
00:04:32,780 --> 00:04:34,946
>> Madeline goes, she knows
exactly where the cups are,

97
00:04:34,946 --> 00:04:38,100
she grabs the cup she hands it
back to Caitlyn, our manager.

98
00:04:38,100 --> 00:04:40,410
The manager hands it back to Vicki.

99
00:04:40,410 --> 00:04:44,709
Vicki now can finally present the
cup to the user, or the customer.

100
00:04:44,709 --> 00:04:46,750
So, in this case, it's
slightly more complicated.

101
00:04:46,750 --> 00:04:50,342
We had a couple more parts, but
basically the idea is pretty similar.

102
00:04:50,342 --> 00:04:51,800
Something happens on the front end.

103
00:04:51,800 --> 00:04:54,030
The user, the customer
asks for something.

104
00:04:54,030 --> 00:04:56,850
The view doesn't know what to do,
it has to go to the controller.

105
00:04:56,850 --> 00:05:00,010
The controller tells
the view whether just

106
00:05:00,010 --> 00:05:02,240
to hand back a certain
amount of data to the user,

107
00:05:02,240 --> 00:05:06,590
or to go get some data from the
back, hand it back to the view,

108
00:05:06,590 --> 00:05:08,620
and the view can present to the user.

109
00:05:08,620 --> 00:05:13,310
>> So I think that's a useful
way of thinking about MVC.

110
00:05:13,310 --> 00:05:17,340
>> Now that we have that framework in
mind, let's talk a little bit about Ruby

111
00:05:17,340 --> 00:05:17,940
on Rails.

112
00:05:17,940 --> 00:05:20,510

113
00:05:20,510 --> 00:05:25,427
Ruby itself, Ruby the language, has
a lot less syntax than PHP or C,

114
00:05:25,427 --> 00:05:27,010
and the things you've been working on.

115
00:05:27,010 --> 00:05:29,343
You'll see there are a lot
fewer semicolons, a lot fewer

116
00:05:29,343 --> 00:05:31,630
curly braces, which makes
it a lot nicer to work with.

117
00:05:31,630 --> 00:05:33,520
It reads a lot more like English.

118
00:05:33,520 --> 00:05:36,540
>> Also, Ruby has some
pretty fun features called

119
00:05:36,540 --> 00:05:40,030
gems, which you can think about
kind of like libraries in C,

120
00:05:40,030 --> 00:05:43,190
or the things you include with
the hash up at the top your files.

121
00:05:43,190 --> 00:05:47,130
So, there are Ruby gems
for just about everything.

122
00:05:47,130 --> 00:05:52,280
It's a super well-documented language,
and has lots of people working on it.

123
00:05:52,280 --> 00:05:56,394
>> So, if you are thinking about
implementing some cool feature,

124
00:05:56,394 --> 00:05:58,310
try a little Googling,
and there will probably

125
00:05:58,310 --> 00:06:02,140
be a library for it that has some
pre-built-in functions that make

126
00:06:02,140 --> 00:06:03,730
whatever you want to do a lot easier.

127
00:06:03,730 --> 00:06:05,688
And we'll talk a little
bit about some that you

128
00:06:05,688 --> 00:06:09,350
can use to enhance
the web app that we're

129
00:06:09,350 --> 00:06:11,500
going to talk about a little bit later.

130
00:06:11,500 --> 00:06:12,070
>> All right.

131
00:06:12,070 --> 00:06:13,960
Ruby on Rails, I said, is a framework.

132
00:06:13,960 --> 00:06:15,620
What is a framework?

133
00:06:15,620 --> 00:06:18,930
A framework is, basically,
just a default structure.

134
00:06:18,930 --> 00:06:22,440
It gives you a set of files
and a set of procedures

135
00:06:22,440 --> 00:06:26,937
for managing data, managing
your views, and just

136
00:06:26,937 --> 00:06:28,520
the general structure of your program.

137
00:06:28,520 --> 00:06:30,980
So database, web
service, web page is kind

138
00:06:30,980 --> 00:06:36,050
of sets up a big chunk
of your project for you,

139
00:06:36,050 --> 00:06:38,960
and then you can go in and kind of
change the things that you want.

140
00:06:38,960 --> 00:06:42,950
>> So, that leads to kind of the
second big pillar of Rails,

141
00:06:42,950 --> 00:06:45,260
which is convention over configuration.

142
00:06:45,260 --> 00:06:51,100
So, Ruby on Rails, the developers in
the community around Ruby on Rails,

143
00:06:51,100 --> 00:06:53,400
values convention over configuration.

144
00:06:53,400 --> 00:06:58,340
And what that means is, there
are standard procedures and ways

145
00:06:58,340 --> 00:07:00,570
of doing things in
Rails that are generally

146
00:07:00,570 --> 00:07:03,770
accepted as the way you
should, or the easiest

147
00:07:03,770 --> 00:07:05,970
way to going about doing things.

148
00:07:05,970 --> 00:07:09,600
>> And you can see that, when we'll
actually start generating our app,

149
00:07:09,600 --> 00:07:12,592
like I said, there are a bunch of
files that are already built for you.

150
00:07:12,592 --> 00:07:14,300
And this is kind of
the convention thing.

151
00:07:14,300 --> 00:07:18,680
It makes it a lot easier
to navigate around your app

152
00:07:18,680 --> 00:07:22,750
and find ways of doing
things, if there's

153
00:07:22,750 --> 00:07:26,719
a set structure, a set of
procedures that you normally follow.

154
00:07:26,719 --> 00:07:29,260
That said there's a lot of
configuration you can do in Rails.

155
00:07:29,260 --> 00:07:33,577
There's a lot of personalisation, a
lot of big-- Twitter's built in Rails.

156
00:07:33,577 --> 00:07:35,910
There are a bunch of other
big companies that use Rails,

157
00:07:35,910 --> 00:07:38,969
so this isn't to say that Rails
can't do whatever you want it to do,

158
00:07:38,969 --> 00:07:41,260
it's just that, generally,
there's a set procedure that

159
00:07:41,260 --> 00:07:42,890
makes it a lot easier if you follow it.

160
00:07:42,890 --> 00:07:45,654

161
00:07:45,654 --> 00:07:47,320
There's really good Rails documentation.

162
00:07:47,320 --> 00:07:51,800
I'll point you to a couple other useful
sources later in the presentation,

163
00:07:51,800 --> 00:07:55,330
but this is just a link to the
official Ruby on Rails documentation.

164
00:07:55,330 --> 00:07:58,810
Definitely check it out if you're
thinking of working in Rails.

165
00:07:58,810 --> 00:07:59,620
>> All right.

166
00:07:59,620 --> 00:08:01,270
A little bit about Ruby.

167
00:08:01,270 --> 00:08:06,160
We'll address differences
between Ruby and the languages

168
00:08:06,160 --> 00:08:09,030
you've been working in more
when we get into code examples,

169
00:08:09,030 --> 00:08:12,550
but this is just kind of a
cool thing that Ruby does,

170
00:08:12,550 --> 00:08:16,110
which is iterating through
numbers and an array.

171
00:08:16,110 --> 00:08:19,150
>> So if you remember, in C,
what you have to do is,

172
00:08:19,150 --> 00:08:22,400
you have to set up a for loop, and
you have to iterate through your array

173
00:08:22,400 --> 00:08:23,700
by accessing each element.

174
00:08:23,700 --> 00:08:28,280
So you have array [0], or
array [1], or array [2].

175
00:08:28,280 --> 00:08:31,790
In Ruby, they've taken care
of a lot of that for you.

176
00:08:31,790 --> 00:08:36,390
So for a for loop, you
can instead use .each.

177
00:08:36,390 --> 00:08:39,990
>> So, if I have an array numbers,
and it has five numbers in it,

178
00:08:39,990 --> 00:08:43,080
and I want to go through every number
and print it out, I can just say,

179
00:08:43,080 --> 00:08:46,840
numbers.each do number, which
sounds a little cryptic at first,

180
00:08:46,840 --> 00:08:49,230
but basically, what that's
doing is, it's saying,

181
00:08:49,230 --> 00:08:52,160
I have an array of numbers,
I want to take each one,

182
00:08:52,160 --> 00:08:57,394
and instead of saying numbers [0],
numbers [1], I can just say number.

183
00:08:57,394 --> 00:08:59,310
And it's going to go
through each one and call

184
00:08:59,310 --> 00:09:00,570
it "number" as it goes through it.

185
00:09:00,570 --> 00:09:03,670
So then, I can just say, puts number,
and the first time through, it'll

186
00:09:03,670 --> 00:09:06,180
puts the number, which is one.

187
00:09:06,180 --> 00:09:09,000
The second time through, it'll
puts the number, which is two.

188
00:09:09,000 --> 00:09:11,370
Third time through, et cetera.

189
00:09:11,370 --> 00:09:15,340
>> So this is just a fairly
common construction in Ruby,

190
00:09:15,340 --> 00:09:17,090
so I thought I'd just
show it to you guys,

191
00:09:17,090 --> 00:09:19,660
so it's not overwhelming if you find it.

192
00:09:19,660 --> 00:09:22,690
And the last difference is, at
the end instead of curly braces,

193
00:09:22,690 --> 00:09:26,142
we say, all right, we're done
with our for loop, let's say end.

194
00:09:26,142 --> 00:09:28,100
And we're telling our
program that, okay, we're

195
00:09:28,100 --> 00:09:30,780
done with this chunk of code.

196
00:09:30,780 --> 00:09:37,430
>> So just a little bit of exposure to
different types of syntax in Ruby.

197
00:09:37,430 --> 00:09:38,130
>> Okay.

198
00:09:38,130 --> 00:09:40,840
We are going to now just dive
straight into an example,

199
00:09:40,840 --> 00:09:46,310
and spend the next 40 minutes just kind
of digging into it, going through it,

200
00:09:46,310 --> 00:09:48,220
explaining things.

201
00:09:48,220 --> 00:09:52,660
If you guys are here for the seminar,
do you want to move up into the couches?

202
00:09:52,660 --> 00:09:53,840
Cool, awesome.

203
00:09:53,840 --> 00:09:56,910
And feel free to stop me at any
point if you have questions.

204
00:09:56,910 --> 00:10:02,510
Raise a hand, whatever, just shout out.

205
00:10:02,510 --> 00:10:05,220
>> OK or actually, let's go back here.

206
00:10:05,220 --> 00:10:11,510

207
00:10:11,510 --> 00:10:15,440
>> So, I've put a link to
all of the code that I've

208
00:10:15,440 --> 00:10:19,620
written for this example on a
website called GitHub, which

209
00:10:19,620 --> 00:10:22,030
if you haven't been
to GitHub before, it's

210
00:10:22,030 --> 00:10:24,900
basically just a place where
you can store a lot of code,

211
00:10:24,900 --> 00:10:26,390
and interact with it.

212
00:10:26,390 --> 00:10:30,370
It has a lot of cool features, but for
now that's all that's really necessary.

213
00:10:30,370 --> 00:10:33,750
>> So, there are two things
that you can-- basically,

214
00:10:33,750 --> 00:10:36,090
two options for dealing
with this code-- you

215
00:10:36,090 --> 00:10:42,710
can visit GitHub.com, and
for their instructions

216
00:10:42,710 --> 00:10:46,130
that you'll see for how to follow
along and build your own app,

217
00:10:46,130 --> 00:10:49,780
that's the same as the
app in the example code,

218
00:10:49,780 --> 00:10:53,440
or you can actually
download all of the code

219
00:10:53,440 --> 00:10:56,607
and there are examples for how to just
run it right off the bat if you want.

220
00:10:56,607 --> 00:10:59,273
Or sorry, instructions for how
to just run it right off the bat,

221
00:10:59,273 --> 00:11:02,220
if you want experiment and just kind
of see what it does on your own.

222
00:11:02,220 --> 00:11:04,220
We'll also be playing
around with it some today.

223
00:11:04,220 --> 00:11:09,380
>> So, in order to just get a copy of all
of the code that's in this repository,

224
00:11:09,380 --> 00:11:14,640
all you have to do is type this
line into your command line,

225
00:11:14,640 --> 00:11:18,331
and these slides will be available
after, so no worries there.

226
00:11:18,331 --> 00:11:20,580
So you can just copy this
line into your command line.

227
00:11:20,580 --> 00:11:23,860
It'll make a new folder with
all of the example code,

228
00:11:23,860 --> 00:11:27,210
or you can download it from the website
because it'll be, from the CS50 website

229
00:11:27,210 --> 00:11:30,790
because it'll be up
there afterwards too.

230
00:11:30,790 --> 00:11:36,090
>> All right, let's look at some code.

231
00:11:36,090 --> 00:11:36,770
Okay.

232
00:11:36,770 --> 00:11:38,970
So this is what the
GitHub link looks like.

233
00:11:38,970 --> 00:11:43,610
If you went to the first link that
was just on the slide just displayed.

234
00:11:43,610 --> 00:11:46,680
So, it tells you about
the app, what's in it,

235
00:11:46,680 --> 00:11:53,730
and then what's the four different kind
of folders that you'll find in the app.

236
00:11:53,730 --> 00:11:59,080
>> So, let's take a look at
the first folder in app.

237
00:11:59,080 --> 00:12:01,020
So to-do list, starting out.

238
00:12:01,020 --> 00:12:04,539
Basically, what this app is going
to do is, it's pretty simple,

239
00:12:04,539 --> 00:12:06,080
it's just going to make a to-do list.

240
00:12:06,080 --> 00:12:09,170
>> And on your to-do list,
you'll be able to add items,

241
00:12:09,170 --> 00:12:13,150
you'll be able to delete items, you'll
be able to view individual items,

242
00:12:13,150 --> 00:12:20,220
edit items, and see all
of the items in your list.

243
00:12:20,220 --> 00:12:24,851
>> So, fairly simple functionality,
but this is what Rails is best at.

244
00:12:24,851 --> 00:12:26,850
Well, Rails is good at a
lot of things, but this

245
00:12:26,850 --> 00:12:29,680
is kind of the foundation
of Rails, and once you

246
00:12:29,680 --> 00:12:33,170
know how to kind of
do these four actions:

247
00:12:33,170 --> 00:12:39,517
create, read, edit and
destroy, it's kind of-- I

248
00:12:39,517 --> 00:12:41,350
always find "destroy"
a really violent word.

249
00:12:41,350 --> 00:12:44,380
I don't know why they just use
"delete," but anyway, the convention

250
00:12:44,380 --> 00:12:47,092
is to say "destroy" so we're
going to destroy items.

251
00:12:47,092 --> 00:12:49,550
But once you can do these four
things, basically, the world

252
00:12:49,550 --> 00:12:55,640
is open to you in web development,
and so it should be a useful example.

253
00:12:55,640 --> 00:12:56,180
All right.

254
00:12:56,180 --> 00:13:01,650
>> So, actually, first, I'm going to
show you what this, in practice, what

255
00:13:01,650 --> 00:13:04,580
this to-do list is going to do.

256
00:13:04,580 --> 00:13:07,610

257
00:13:07,610 --> 00:13:08,626
And, I'll explain.

258
00:13:08,626 --> 00:13:11,830

259
00:13:11,830 --> 00:13:17,800
So, if we go to, I always
forget the exact syntax

260
00:13:17,800 --> 00:13:21,230
for starting a Rails server,
but that's why I wrote it down.

261
00:13:21,230 --> 00:13:22,420
All right.

262
00:13:22,420 --> 00:13:24,232
So, this is just starting a server.

263
00:13:24,232 --> 00:13:26,940
You guys are all doing something
similar on the Problem Sets, not

264
00:13:26,940 --> 00:13:27,980
this exact syntax.

265
00:13:27,980 --> 00:13:30,230
We'll go into it a little more later.

266
00:13:30,230 --> 00:13:33,500
>> Okay, so this is what the
final app is going to do.

267
00:13:33,500 --> 00:13:38,820
We are going to be welcomed to our
site, we can view our to-do list.

268
00:13:38,820 --> 00:13:40,960
Right now, it's empty,
so we can add an item.

269
00:13:40,960 --> 00:13:49,950
Let's say, "Go to CS50 seminar today."

270
00:13:49,950 --> 00:13:51,880
Save item.

271
00:13:51,880 --> 00:13:54,350
>> All right, so now we're seeing
exactly what we just wrote.

272
00:13:54,350 --> 00:13:55,750
It makes sense.

273
00:13:55,750 --> 00:13:59,930
And then, we can edit it if we want,
or we could just go back to do list,

274
00:13:59,930 --> 00:14:03,480
and now we see the item
is, "Go to CS50 today."

275
00:14:03,480 --> 00:14:06,240
Or sorry, to make it
a little clearer, we

276
00:14:06,240 --> 00:14:10,880
could add a little break here, "Go
to CS50 seminar," the text is today.

277
00:14:10,880 --> 00:14:14,990
We can also delete this item,
and now our to-do list is empty.

278
00:14:14,990 --> 00:14:16,050
>> So again, pretty basic.

279
00:14:16,050 --> 00:14:20,610
There are some, I'm not sure if this
year there's a seminar on Bootstrap,

280
00:14:20,610 --> 00:14:22,520
but if you want to make
your site beautiful,

281
00:14:22,520 --> 00:14:25,390
you can use things like
HTML, CSS, and Bootstrap.

282
00:14:25,390 --> 00:14:29,300
Definitely view those seminars if you're
interested in making prettier apps,

283
00:14:29,300 --> 00:14:31,590
but we're working on
functionality today.

284
00:14:31,590 --> 00:14:34,130
>> All right, so let's get started.

285
00:14:34,130 --> 00:14:38,320
So, if you go to, again from
this home page on GitHub,

286
00:14:38,320 --> 00:14:41,300
you could say "list
starting out," and this

287
00:14:41,300 --> 00:14:44,900
will walk you through just the basic
setting up your framework in Rails,

288
00:14:44,900 --> 00:14:50,890
starting your server, and getting
something to display on the screen.

289
00:14:50,890 --> 00:14:53,010
>> So this is just the basic setup.

290
00:14:53,010 --> 00:14:56,640
So, making a new Rails
project is really easy.

291
00:14:56,640 --> 00:15:00,120
All you have to do, since
it's pre-installed on the IDE,

292
00:15:00,120 --> 00:15:03,640
is type "Rails new" and
then your project name.

293
00:15:03,640 --> 00:15:07,040
And that's going to generate
a whole bunch of folders.

294
00:15:07,040 --> 00:15:11,110
>> As you can see, if I go
to todo_list_starting_out,

295
00:15:11,110 --> 00:15:14,430
we have, it can be kind of
overwhelming, because there's just

296
00:15:14,430 --> 00:15:17,030
a ton of stuff that just appears.

297
00:15:17,030 --> 00:15:19,921
Luckily, you don't have to
deal with too much of it.

298
00:15:19,921 --> 00:15:22,670
Especially, when you're starting
out just building basic web apps.

299
00:15:22,670 --> 00:15:26,070
>> The main folder you'll be
concerned with is this app folder.

300
00:15:26,070 --> 00:15:32,176
And you can see in this app
folder, we have a couple things

301
00:15:32,176 --> 00:15:33,300
that already look familiar.

302
00:15:33,300 --> 00:15:36,990
So, we have models,
views, and controllers.

303
00:15:36,990 --> 00:15:40,280
>> So you can guess where the different
code for models, views, and controllers

304
00:15:40,280 --> 00:15:45,010
are going to go, and it's probably
going to be in the appropriate folders.

305
00:15:45,010 --> 00:15:47,890
So, the first thing we
want to do, is basically,

306
00:15:47,890 --> 00:15:51,030
we just want to make something
appear on the screen.

307
00:15:51,030 --> 00:15:55,610
In this section, we just want to
welcome someone comes to our home page,

308
00:15:55,610 --> 00:15:56,720
just say hello.

309
00:15:56,720 --> 00:16:02,710
>> So, the way you do that is, you can
generate a controller really easily

310
00:16:02,710 --> 00:16:03,440
in Rails.

311
00:16:03,440 --> 00:16:05,450
Right now, we don't
have any controllers.

312
00:16:05,450 --> 00:16:08,910
Or, if you've just gone this far,
you won't have any controllers.

313
00:16:08,910 --> 00:16:11,850
If you go to your
controllers folder, all

314
00:16:11,850 --> 00:16:16,472
it will have is this application
controller, which is just telling you,

315
00:16:16,472 --> 00:16:20,695
you can do some base configuration
in your application controller,

316
00:16:20,695 --> 00:16:23,070
but it's not going to tell
your app what to do if someone

317
00:16:23,070 --> 00:16:25,340
clicks on a specific web page.

318
00:16:25,340 --> 00:16:28,850
>> So, the way that you
set that it up, is there

319
00:16:28,850 --> 00:16:33,600
is a line you can run in Rails,
which basically, just says,

320
00:16:33,600 --> 00:16:34,770
generate a controller.

321
00:16:34,770 --> 00:16:39,410
Make me a file that's going to help
me perform the functionality that I

322
00:16:39,410 --> 00:16:40,620
need on this website.

323
00:16:40,620 --> 00:16:44,070
And, in this particular one,
we're making a welcome controller,

324
00:16:44,070 --> 00:16:46,992
because all it's going to do
is welcome users to the page.

325
00:16:46,992 --> 00:16:50,200
And so, you generally want to name your
controller something that makes sense

326
00:16:50,200 --> 00:16:52,033
for the functionality
it's going to perform,

327
00:16:52,033 --> 00:16:59,690
and within that welcome controller,
we want to have an index action.

328
00:16:59,690 --> 00:17:03,470
Now, if you remember from
your server Problem Set, one

329
00:17:03,470 --> 00:17:08,980
of the things you had to do, was check
to see if a user went to a home page

330
00:17:08,980 --> 00:17:11,880
without, so if they just
went to a directory,

331
00:17:11,880 --> 00:17:14,818
you had to check for
index.html or index.php.

332
00:17:14,818 --> 00:17:18,609
That's because, by
convention, "home pages"

333
00:17:18,609 --> 00:17:21,160
are called "index" in web development.

334
00:17:21,160 --> 00:17:24,839
>> So, you can think of index.anything,
really as a home page.

335
00:17:24,839 --> 00:17:28,680
So we're going to say, we want
to be able to handle requests

336
00:17:28,680 --> 00:17:30,570
to this home page.

337
00:17:30,570 --> 00:17:33,960
And we want to have an action within
our controller that can deal with that.

338
00:17:33,960 --> 00:17:35,780
So what does that look like.

339
00:17:35,780 --> 00:17:38,560
>> Well, once you run this
line of code, you're

340
00:17:38,560 --> 00:17:40,410
going to get a welcome controller.

341
00:17:40,410 --> 00:17:45,390
And, within that welcome controller,
it defines a method index.

342
00:17:45,390 --> 00:17:46,360
And that's all it does.

343
00:17:46,360 --> 00:17:47,336
It just says it exists.

344
00:17:47,336 --> 00:17:50,210
And that's because, we don't really
need any fancy functionality when

345
00:17:50,210 --> 00:17:52,910
the people want to go to our home page,
we just want to show them the page.

346
00:17:52,910 --> 00:17:55,910
>> So, we just need to tell our controller,
"All right, this action exists.

347
00:17:55,910 --> 00:17:56,940
This page exists.

348
00:17:56,940 --> 00:18:01,360
Don't freak out when you
get here and just show us

349
00:18:01,360 --> 00:18:05,040
this index page," which is
all well and good, except we

350
00:18:05,040 --> 00:18:06,670
haven't made an index page yet.

351
00:18:06,670 --> 00:18:11,070
>> So that goes to the next
thing we have to do,

352
00:18:11,070 --> 00:18:15,999
which is once you set up your controller
in Step 3, you have to go to the views,

353
00:18:15,999 --> 00:18:17,790
because, although you've
told your app what

354
00:18:17,790 --> 00:18:21,510
to do when they go to the index
page, you haven't made an index page.

355
00:18:21,510 --> 00:18:25,510

356
00:18:25,510 --> 00:18:27,950
>> All of our views, like
I said before, are going

357
00:18:27,950 --> 00:18:30,280
to be stored in this views folder.

358
00:18:30,280 --> 00:18:32,740
And, as you can see, we
already have a welcome folder.

359
00:18:32,740 --> 00:18:36,430
That was generated when we
generated our controller.

360
00:18:36,430 --> 00:18:39,100
>> It assumed you're probably
going to want to show

361
00:18:39,100 --> 00:18:43,397
people views with the various things
you want to do in this controller.

362
00:18:43,397 --> 00:18:46,480
So, we're going to make a folder for
you that's related to this controller

363
00:18:46,480 --> 00:18:47,064
that you made.

364
00:18:47,064 --> 00:18:49,771
And it's going to be called
"welcome" because your controller was

365
00:18:49,771 --> 00:18:50,600
called welcome.

366
00:18:50,600 --> 00:18:53,560
>> You can put in any pages you want here.

367
00:18:53,560 --> 00:18:55,890
So, like I said, we want an index page.

368
00:18:55,890 --> 00:18:58,290
We want a home page.

369
00:18:58,290 --> 00:19:02,870
So, we can create this index page.

370
00:19:02,870 --> 00:19:05,520
It won't be here originally
when you first type this,

371
00:19:05,520 --> 00:19:07,010
so you'll have to make it.

372
00:19:07,010 --> 00:19:10,540
And you want it to be
called index.html.erb

373
00:19:10,540 --> 00:19:17,530
because that's kind the Rails way of
saying, this is a Rails view page.

374
00:19:17,530 --> 00:19:22,111
>> So instead of just index.html,
the convention is index.html.erb.

375
00:19:22,111 --> 00:19:24,650
And, you can put whatever
you want on this home page.

376
00:19:24,650 --> 00:19:27,150
Right now, all I've said is "Hello."

377
00:19:27,150 --> 00:19:31,230
>> So that means, what happens,
let's see this in action.

378
00:19:31,230 --> 00:19:42,470
Let's stop our server from our
final to-do list, go to our starting

379
00:19:42,470 --> 00:19:45,810
out to-do list, and
start the server again.

380
00:19:45,810 --> 00:19:49,030

381
00:19:49,030 --> 00:19:51,010
Maybe.

382
00:19:51,010 --> 00:19:51,550
Let's see.

383
00:19:51,550 --> 00:19:55,881

384
00:19:55,881 --> 00:19:56,380
Here we go.

385
00:19:56,380 --> 00:20:01,230

386
00:20:01,230 --> 00:20:02,060
>> Okay.

387
00:20:02,060 --> 00:20:06,630
So now our server should be running, and
it's going to be serving us this basic,

388
00:20:06,630 --> 00:20:08,160
just starting out page.

389
00:20:08,160 --> 00:20:12,250
So, when we visit the home
page remember, we've--

390
00:20:12,250 --> 00:20:13,980
>> Oh, sorry.

391
00:20:13,980 --> 00:20:16,800
There's one other
important area that you

392
00:20:16,800 --> 00:20:21,950
need to configure when you're
starting out your Rails app.

393
00:20:21,950 --> 00:20:26,110
So, we've told the
controller what to expect

394
00:20:26,110 --> 00:20:33,070
when we get passed this information.

395
00:20:33,070 --> 00:20:38,100
But we haven't actually configured
the routes of our web app yet.

396
00:20:38,100 --> 00:20:43,850
>> So, basically, we need to make
sure that the controller gets

397
00:20:43,850 --> 00:20:46,140
passed the right information
at the right time.

398
00:20:46,140 --> 00:20:49,530
So, how does our web app even know
that when we go to the home page,

399
00:20:49,530 --> 00:20:55,460
it should tell the welcome controller
to be okay with the index page,

400
00:20:55,460 --> 00:20:57,880
and then trigger the index page?

401
00:20:57,880 --> 00:21:00,254
>> Right now, if we went to
our home page, our app

402
00:21:00,254 --> 00:21:02,170
doesn't really know that
it's supposed to talk

403
00:21:02,170 --> 00:21:03,930
to the welcome controller at all.

404
00:21:03,930 --> 00:21:08,490
So, the last thing,
kind of important area

405
00:21:08,490 --> 00:21:13,110
to edit when you're setting
up an app is routes.

406
00:21:13,110 --> 00:21:15,360
And that's in config, routes.rb.

407
00:21:15,360 --> 00:21:23,010

408
00:21:23,010 --> 00:21:25,120
>> So, I do have that
correct in my directions

409
00:21:25,120 --> 00:21:28,040
on this Getting Started page, so if
you're following along with that,

410
00:21:28,040 --> 00:21:32,430
that should be easily discovered.

411
00:21:32,430 --> 00:21:37,260
>> So, the one thing we have
to do, is we have to say,

412
00:21:37,260 --> 00:21:40,690
when you first arrive at this page,
this line will be commented out,

413
00:21:40,690 --> 00:21:43,300
because there are a lot of comments.

414
00:21:43,300 --> 00:21:45,890
Again, this is just part of
when Rails gets generated,

415
00:21:45,890 --> 00:21:47,680
it puts a whole bunch of stuff in here.

416
00:21:47,680 --> 00:21:51,760
It has all this stuff commented
out, because you probably

417
00:21:51,760 --> 00:21:55,620
don't need it originally, but this
is kind of stuff that a lot of people

418
00:21:55,620 --> 00:21:56,710
tend to use.

419
00:21:56,710 --> 00:21:58,560
>> So, you can delete all
of this if you want,

420
00:21:58,560 --> 00:22:00,980
but you'll find some
of the things you might

421
00:22:00,980 --> 00:22:04,180
want to uncomment at various points,
just because they tend to be useful.

422
00:22:04,180 --> 00:22:06,750
So, this is something that
Rails just sets up for you.

423
00:22:06,750 --> 00:22:12,090
>> So, this will be a line that's
commented out, but you can uncomment.

424
00:22:12,090 --> 00:22:15,640
And, what this line says is, all
right, if the user goes to the root,

425
00:22:15,640 --> 00:22:20,740
goes to our home page, we want to
trigger the welcome controllers index

426
00:22:20,740 --> 00:22:21,597
method.

427
00:22:21,597 --> 00:22:23,180
And that's how this all ties together.

428
00:22:23,180 --> 00:22:24,610
>> User goes to the home page.

429
00:22:24,610 --> 00:22:29,190
In routes, you set it up so that will
trigger the welcome controller, that

430
00:22:29,190 --> 00:22:32,350
will go to welcome controller,
which will then say, all right.

431
00:22:32,350 --> 00:22:37,120
Index, I want to call index.html.erb
and give that back to the user.

432
00:22:37,120 --> 00:22:45,542
>> Seems kind of convoluted, but you'll
start to see a kind of pattern of,

433
00:22:45,542 --> 00:22:48,750
we have to do something with routes, we
have to do something with controller,

434
00:22:48,750 --> 00:22:50,660
we have to do something with the views.

435
00:22:50,660 --> 00:22:55,020
And then later, we'll add in,
okay, once we have all our routes,

436
00:22:55,020 --> 00:22:58,190
views, controller, model, controller,
views, controller, model, controller,

437
00:22:58,190 --> 00:22:59,390
views.

438
00:22:59,390 --> 00:23:03,115
>> So, that's kind of a
pattern you'll start to see.

439
00:23:03,115 --> 00:23:04,490
AUDIENCE 1: Can I ask a question?

440
00:23:04,490 --> 00:23:06,088
SPEAKER: Yeah, go for it.

441
00:23:06,088 --> 00:23:06,754
AUDIENCE 1: Two.

442
00:23:06,754 --> 00:23:09,741
One, is that I noticed you
restarted the server, after you

443
00:23:09,741 --> 00:23:11,056
put in the index thing.

444
00:23:11,056 --> 00:23:14,410
Does that mean every time you change
some code, you need to restart it?

445
00:23:14,410 --> 00:23:18,920
>> SPEAKER: So, it, often times,
especially if you're just

446
00:23:18,920 --> 00:23:22,600
kind of changing around views,
you just need to refresh the page.

447
00:23:22,600 --> 00:23:25,490
Sometimes, if you make
some major change,

448
00:23:25,490 --> 00:23:27,810
you'll need to restart the server.

449
00:23:27,810 --> 00:23:30,112
Generally, if something isn't
showing up that you think

450
00:23:30,112 --> 00:23:32,570
it should, just restart the
server and often it'll come up.

451
00:23:32,570 --> 00:23:33,280
>> AUDIENCE 1: So, just restart it.

452
00:23:33,280 --> 00:23:34,690
>> SPEAKER: Yeah, usually, yeah.

453
00:23:34,690 --> 00:23:38,036
Basically, usually, I just restart the
server if I run into some sort issue.

454
00:23:38,036 --> 00:23:41,686
>> AUDIENCE 1: And, my second
question is, it seems, as you said,

455
00:23:41,686 --> 00:23:44,730
seems a pretty convoluted
process to fix your index page.

456
00:23:44,730 --> 00:23:49,082
Now, I assume there's a lot of things
that makes it powerful and versatile,

457
00:23:49,082 --> 00:23:50,456
but I haven't seen that part yet.

458
00:23:50,456 --> 00:23:52,960

459
00:23:52,960 --> 00:23:54,426
Will you explain a little bit?

460
00:23:54,426 --> 00:23:56,610
>> AUDIENCE 2: Go ahead and
reiterate his question.

461
00:23:56,610 --> 00:23:58,220
>> SPEAKER: Oh, sorry.

462
00:23:58,220 --> 00:24:02,560
So, the first question was,
I restarted the server,

463
00:24:02,560 --> 00:24:05,250
and why did I do that
at that particular time?

464
00:24:05,250 --> 00:24:07,666
The specific reason for that
one is because I was actually

465
00:24:07,666 --> 00:24:11,070
changing folders, and so I had to
restart it for the correct app.

466
00:24:11,070 --> 00:24:15,720
But usually, you just have to restart
the server if you make big changes.

467
00:24:15,720 --> 00:24:18,820
>> The second question is, this
does seem really convoluted.

468
00:24:18,820 --> 00:24:22,240
Why is it so complicated to make
just a single web page appear

469
00:24:22,240 --> 00:24:24,050
and where is the power of Rails?

470
00:24:24,050 --> 00:24:27,990
>> So, basically, the power
Rails is going to come

471
00:24:27,990 --> 00:24:31,280
in one of the next things I'm
going to show you, basically.

472
00:24:31,280 --> 00:24:34,920
So, although this does seem convoluted,
and especially compared to your Problem

473
00:24:34,920 --> 00:24:37,470
Sets, it's actually
a lot more convoluted

474
00:24:37,470 --> 00:24:40,520
in almost any other framework.

475
00:24:40,520 --> 00:24:42,920
CS50 has kind of taken care
of a lot of this back end

476
00:24:42,920 --> 00:24:48,089
for you, when they've generated
the code for your CS50 Finance.

477
00:24:48,089 --> 00:24:51,130
So, a lot of this has just gone under
the hood in what you're working in,

478
00:24:51,130 --> 00:24:54,150
because they wanted you guys to
focus on model-view-controller,

479
00:24:54,150 --> 00:24:57,964
just those aspects, because that
is the base of web development.

480
00:24:57,964 --> 00:25:01,130
And it's really important to understand
that stuff and how it fits together.

481
00:25:01,130 --> 00:25:03,617
>> However, there's a lot of
stuff under the hood that

482
00:25:03,617 --> 00:25:06,200
has to go in before you can even
get to model-view-controller.

483
00:25:06,200 --> 00:25:08,850
So, that's kind of what
you're seeing here.

484
00:25:08,850 --> 00:25:12,860
And really, if you look
step-by-step at the directions,

485
00:25:12,860 --> 00:25:15,990
it actually only is about four steps.

486
00:25:15,990 --> 00:25:21,070
You have to generate the framework,
so just type "rails new."

487
00:25:21,070 --> 00:25:25,110
You have to generate a controller,
you have to generate an index,

488
00:25:25,110 --> 00:25:27,040
and then you have to create a route.

489
00:25:27,040 --> 00:25:31,220
>> So it's really only editing four files.

490
00:25:31,220 --> 00:25:35,130
And a lot of the set up is done for you.

491
00:25:35,130 --> 00:25:38,810
So it also seems more convoluted,
because it's taken a lot more

492
00:25:38,810 --> 00:25:42,030
time, since I've tried to explain the
various steps and why they happen.

493
00:25:42,030 --> 00:25:44,680
So, if you think about it
only as of those four steps,

494
00:25:44,680 --> 00:25:46,690
it seems less convoluted.

495
00:25:46,690 --> 00:25:50,450
And also, what I'm about
to show you, is kind part

496
00:25:50,450 --> 00:25:53,270
of the reason why people
love Rails so much.

497
00:25:53,270 --> 00:25:59,130
>> Okay, so let's just first see this page
that we've worked so hard to create.

498
00:25:59,130 --> 00:25:59,710
"Hello!"

499
00:25:59,710 --> 00:26:02,770
All right, very underwhelming.

500
00:26:02,770 --> 00:26:04,930
Okay, let's continue.

501
00:26:04,930 --> 00:26:09,740
So, after the second part,
after to-do list starting out,

502
00:26:09,740 --> 00:26:11,240
is to-do list with items.

503
00:26:11,240 --> 00:26:13,140
>> So, if it's going
to-do list, it probably

504
00:26:13,140 --> 00:26:15,780
needs some items in the to-do list.

505
00:26:15,780 --> 00:26:23,060
So, the first thing we have to do,
or one of the first things to do

506
00:26:23,060 --> 00:26:29,080
is to make a series of routes,
because you're probably

507
00:26:29,080 --> 00:26:31,730
going to want a page where
you can make new items.

508
00:26:31,730 --> 00:26:35,530
>> You're probably going to want to page
where you can see the individual items.

509
00:26:35,530 --> 00:26:39,700
You're probably going to want a
page where you can edit the items,

510
00:26:39,700 --> 00:26:47,600
and then obviously, deleting is,
you might not want a page for that,

511
00:26:47,600 --> 00:26:51,650
but you're going to want to be able
to click on something to delete items,

512
00:26:51,650 --> 00:26:53,650
and have that information available.

513
00:26:53,650 --> 00:26:59,460
>> So, this is a really useful
thing that Rails does.

514
00:26:59,460 --> 00:27:06,280
So, if we go into the next folder, which
is with items, we can see in our routes

515
00:27:06,280 --> 00:27:09,200
again.

516
00:27:09,200 --> 00:27:10,820
Config, routes.

517
00:27:10,820 --> 00:27:13,707

518
00:27:13,707 --> 00:27:14,790
We've added something new.

519
00:27:14,790 --> 00:27:19,690
So before, we just uncommented
this root welcome index.

520
00:27:19,690 --> 00:27:21,940
And that was again saying,
if you go to the home page,

521
00:27:21,940 --> 00:27:24,290
go to the welcome controller,
go to the index page.

522
00:27:24,290 --> 00:27:28,630
Now we have this three extra lines.

523
00:27:28,630 --> 00:27:30,000
They look a little cryptic.

524
00:27:30,000 --> 00:27:33,090
It's kind of unclear what they're doing.

525
00:27:33,090 --> 00:27:36,750
But basically, this is
creating a Rails resource.

526
00:27:36,750 --> 00:27:44,760
>> And a resource is just a set
of instructions and procedures

527
00:27:44,760 --> 00:27:53,130
relating to a specific,
sorry, let me rephrase this.

528
00:27:53,130 --> 00:27:57,089
A resource is a set of procedures
relating to some construct

529
00:27:57,089 --> 00:27:58,130
that you'll want to have.

530
00:27:58,130 --> 00:27:59,505
So in our case, it's items.

531
00:27:59,505 --> 00:28:02,130
We want to have items; we want
to do a bunch of things to them.

532
00:28:02,130 --> 00:28:06,040
>> And so what this couple
lines does, is it

533
00:28:06,040 --> 00:28:09,350
says, we want to be able
to have a bunch of paths

534
00:28:09,350 --> 00:28:12,460
that we can go to do different
things with our items.

535
00:28:12,460 --> 00:28:14,620
And it creates all these paths for us.

536
00:28:14,620 --> 00:28:19,025
So, one way of demonstrating
that, is if we go --

537
00:28:19,025 --> 00:28:24,080
let's stop our server so I can
use the terminal-- rake routes.

538
00:28:24,080 --> 00:28:31,250
What this command does, is
it, I'm still in starting out.

539
00:28:31,250 --> 00:28:33,580
>> But this is, we can
start with this actually.

540
00:28:33,580 --> 00:28:40,690
So, as you can see, this showed us that
we have, we can go to our home page,

541
00:28:40,690 --> 00:28:45,290
and that will trigger the
welcome controllers index method,

542
00:28:45,290 --> 00:28:49,300
but we can also go to welcome/index,
and that will do the same thing.

543
00:28:49,300 --> 00:28:52,076
>> So this is two different
routes that you can type in,

544
00:28:52,076 --> 00:28:55,410
in order to get to the same home page.

545
00:28:55,410 --> 00:28:59,270
So this is showing us all are available
routes in our starting out app.

546
00:28:59,270 --> 00:29:04,450
Now, if we go to our new app that has
items in it, so todo_list_with_items.

547
00:29:04,450 --> 00:29:07,790

548
00:29:07,790 --> 00:29:10,430
>> And then we run rake routes again.

549
00:29:10,430 --> 00:29:13,330
So, to show us all the available
route to the user can type in.

550
00:29:13,330 --> 00:29:14,720
Now, we have a bunch more.

551
00:29:14,720 --> 00:29:18,490
And all we've done is added
those couple lines in our routes,

552
00:29:18,490 --> 00:29:24,750
but now we can go to
slash items from our root,

553
00:29:24,750 --> 00:29:27,870
and we'll see index page
the items controller.

554
00:29:27,870 --> 00:29:31,950
Or, we'll trigger the index
action in the items controller.

555
00:29:31,950 --> 00:29:38,040
We have "new," we have
"edit," we have "delete."

556
00:29:38,040 --> 00:29:40,340
>> So, this has created a
bunch of available routes.

557
00:29:40,340 --> 00:29:42,580
Now, we haven't made our
index controller yet,

558
00:29:42,580 --> 00:29:49,080
so we haven't actually made any valid,
we haven't made these actions valid.

559
00:29:49,080 --> 00:29:52,910
But now we don't have to add a
different line in our routes controller

560
00:29:52,910 --> 00:29:56,580
for every single one of these
actions, not in our routes controller,

561
00:29:56,580 --> 00:29:59,030
in our routes file.

562
00:29:59,030 --> 00:30:01,850
>> So the system generates
this automatically for you.

563
00:30:01,850 --> 00:30:07,000
All you have to do is
edit your routes to rb.

564
00:30:07,000 --> 00:30:10,710

565
00:30:10,710 --> 00:30:13,225
Already, we're seeing one
of the perks of Rails.

566
00:30:13,225 --> 00:30:15,380
It does all this for us.

567
00:30:15,380 --> 00:30:17,750
And now, all we have to
do, like we did before,

568
00:30:17,750 --> 00:30:20,870
is edit our controller so we can
handle all of these different paths

569
00:30:20,870 --> 00:30:24,540
that the user may want to take, and
edit our views so that we have files

570
00:30:24,540 --> 00:30:27,870
that the controller can call.

571
00:30:27,870 --> 00:30:29,650
>> Okay.

572
00:30:29,650 --> 00:30:38,110
Let's go to, We want
to edit our controller.

573
00:30:38,110 --> 00:30:38,610
Right.

574
00:30:38,610 --> 00:30:39,943
That's exactly what I just said.

575
00:30:39,943 --> 00:30:43,070

576
00:30:43,070 --> 00:30:44,070
Or make a controller.

577
00:30:44,070 --> 00:30:51,930
>> So, you'll see right now, I have a new
controller called "items controller."

578
00:30:51,930 --> 00:30:55,060
And I generated that
very similarly to the way

579
00:30:55,060 --> 00:30:57,660
that I generated the
previous controller.

580
00:30:57,660 --> 00:31:03,410
So, if you go through the
instructions in Part Two, with items,

581
00:31:03,410 --> 00:31:09,260
you'll see that after you edit the
routes, you make a new controller.

582
00:31:09,260 --> 00:31:14,120
And, if you remember the syntax
from the previous example, great.

583
00:31:14,120 --> 00:31:15,410
If not, fine.

584
00:31:15,410 --> 00:31:17,480
>> bin/rails generate controller items.

585
00:31:17,480 --> 00:31:20,354
This is a little different, because
we didn't say index right after,

586
00:31:20,354 --> 00:31:22,520
because we just want to
generate a blank controller,

587
00:31:22,520 --> 00:31:25,870
because we'll be doing a lot of
configuration within this controller.

588
00:31:25,870 --> 00:31:29,859
So we didn't want to preset index
method in it just on the start,

589
00:31:29,859 --> 00:31:31,400
but that's a pretty small difference.

590
00:31:31,400 --> 00:31:32,900
Basically, it's exactly the same.

591
00:31:32,900 --> 00:31:37,240
We're making a controller so that we can
handle any requests to deal with items,

592
00:31:37,240 --> 00:31:42,570
and that will also make a file in
our views to deal with controllers,

593
00:31:42,570 --> 00:31:43,495
or to deal with items.

594
00:31:43,495 --> 00:31:48,040

595
00:31:48,040 --> 00:31:49,900
>> Can I get a gauge?

596
00:31:49,900 --> 00:31:51,400
How are people doing?

597
00:31:51,400 --> 00:31:52,950
It's a lot of information.

598
00:31:52,950 --> 00:31:54,430
Is a generally making sense?

599
00:31:54,430 --> 00:31:57,070
Are there things that are just
absolutely way too confusing

600
00:31:57,070 --> 00:31:58,240
that I should go over?

601
00:31:58,240 --> 00:32:01,290
The purpose of something?

602
00:32:01,290 --> 00:32:02,650
Doing okay?

603
00:32:02,650 --> 00:32:03,150
Okay.

604
00:32:03,150 --> 00:32:03,650
All right.

605
00:32:03,650 --> 00:32:04,831
We'll go on then.

606
00:32:04,831 --> 00:32:05,330
All right.

607
00:32:05,330 --> 00:32:06,621
We've made an items controller.

608
00:32:06,621 --> 00:32:08,430
We want to deal with items.

609
00:32:08,430 --> 00:32:09,980
What do we want to do with our items?

610
00:32:09,980 --> 00:32:14,190
Well, we want to be
able to make new items,

611
00:32:14,190 --> 00:32:17,200
and want to be able to create items.

612
00:32:17,200 --> 00:32:18,830
These seem kind of similar.

613
00:32:18,830 --> 00:32:20,040
What's the difference?

614
00:32:20,040 --> 00:32:26,080
>> Well, there are a couple different
ways that you can channel information

615
00:32:26,080 --> 00:32:27,950
into a controller.

616
00:32:27,950 --> 00:32:30,470
One, is through GET
requests, so through URLs.

617
00:32:30,470 --> 00:32:31,470
And we already saw that.

618
00:32:31,470 --> 00:32:35,950
We went to welcome/index, we got
our welcome controllers index page.

619
00:32:35,950 --> 00:32:39,320
That was information channeled to
the controller through a GET request.

620
00:32:39,320 --> 00:32:42,450
>> There also POST requests, though.

621
00:32:42,450 --> 00:32:47,180
And that's if you submit
a form online, there's

622
00:32:47,180 --> 00:32:49,830
still information that sent back
and forth to the controller,

623
00:32:49,830 --> 00:32:52,020
but it doesn't necessarily
go through the URL.

624
00:32:52,020 --> 00:32:56,080
So there are a couple different
things we can do with these items.

625
00:32:56,080 --> 00:32:58,890
We need a page to go
to where we can type

626
00:32:58,890 --> 00:33:01,690
in the information we want for
the new item in our to-do list,

627
00:33:01,690 --> 00:33:04,310
but we also need to be
able to handle, once we

628
00:33:04,310 --> 00:33:08,612
click Enter, what happens with this
information that we've typed in.

629
00:33:08,612 --> 00:33:11,070
So that's kind of the general
purpose of "new" and "create"

630
00:33:11,070 --> 00:33:14,170
"New" tends to be a
page that you'll visit.

631
00:33:14,170 --> 00:33:17,810
It's information that gets passed
to the controller through a URL.

632
00:33:17,810 --> 00:33:24,826
So when you go to /new, your routes are
set up to handle that as information

633
00:33:24,826 --> 00:33:26,700
that will get passed to
the items controller,

634
00:33:26,700 --> 00:33:30,470
and then you'll kind of render a page
that shows a form that the user can

635
00:33:30,470 --> 00:33:32,020
type in information.

636
00:33:32,020 --> 00:33:34,160
>> But then there's "create."

637
00:33:34,160 --> 00:33:38,070
So once you type in your
information and press Submit,

638
00:33:38,070 --> 00:33:40,210
create tends to be the
action that will actually

639
00:33:40,210 --> 00:33:44,310
take that information that you've
entered, and do something with it.

640
00:33:44,310 --> 00:33:47,910
So that's the distinction between those
two which can be originally confusing.

641
00:33:47,910 --> 00:33:53,160
>> So, all of that our create
method does right now,

642
00:33:53,160 --> 00:33:56,830
is render, plane, params, item, inspect.

643
00:33:56,830 --> 00:34:02,260
All that means, is take the information
you got relating to item, this item

644
00:34:02,260 --> 00:34:04,550
that we typed in
information for, and we'll

645
00:34:04,550 --> 00:34:08,010
show you how that works in a
moment, and just show it to me.

646
00:34:08,010 --> 00:34:12,260
So after you type in
information on this new page

647
00:34:12,260 --> 00:34:16,050
show me what you typed
in on the next page.

648
00:34:16,050 --> 00:34:20,820
>> And, we can see that in action.

649
00:34:20,820 --> 00:34:24,390
Let me close some of these
so it gets less cluttered.

650
00:34:24,390 --> 00:34:27,520

651
00:34:27,520 --> 00:34:28,630
Let's go.

652
00:34:28,630 --> 00:34:30,522
Oh, we're in with items.

653
00:34:30,522 --> 00:34:31,605
So let's start our server.

654
00:34:31,605 --> 00:34:41,120

655
00:34:41,120 --> 00:34:42,100
All right.

656
00:34:42,100 --> 00:34:45,050
I've just gone to items/new.

657
00:34:45,050 --> 00:34:50,440
This is telling, because of the
way we set up our routes in config,

658
00:34:50,440 --> 00:34:55,929
this path is set up to give
information to the items controller.

659
00:34:55,929 --> 00:35:01,170
And specifically, the new action
within the items controller.

660
00:35:01,170 --> 00:35:04,830
So, if you remember all that
said, it was "def new end."

661
00:35:04,830 --> 00:35:10,150
So that's just going to
try and find new.html.erb,

662
00:35:10,150 --> 00:35:15,344
the HTML page that relates to the
action that we're looking for.

663
00:35:15,344 --> 00:35:17,010
And I'll show you that page in a moment.

664
00:35:17,010 --> 00:35:19,470
But as you can see it just
says make a form, basically.

665
00:35:19,470 --> 00:35:21,170
>> That's what that page does.

666
00:35:21,170 --> 00:35:22,580
We can type in another thing.

667
00:35:22,580 --> 00:35:29,570
So "new item" and "made today again."

668
00:35:29,570 --> 00:35:34,160
We're going to save it, and we see
all that our create action does

669
00:35:34,160 --> 00:35:36,690
is print it out to the screen right now.

670
00:35:36,690 --> 00:35:40,770
Eventually, in the next section,
we're going to put into a database,

671
00:35:40,770 --> 00:35:45,700
but for now, we can see we were able
to take that information and handle it.

672
00:35:45,700 --> 00:35:48,220
>> And so again, this is still
kind of underwhelming,

673
00:35:48,220 --> 00:35:52,930
but at least we now can kind
of start dealing with data.

674
00:35:52,930 --> 00:35:56,800
So, what does our new page look like?

675
00:35:56,800 --> 00:35:59,950
What does the HTML
look like on that page?

676
00:35:59,950 --> 00:36:02,820
>> So again, you kind of
expect that to be in views,

677
00:36:02,820 --> 00:36:04,690
because it's dealing
with information that

678
00:36:04,690 --> 00:36:06,580
actually gets displayed on the screen.

679
00:36:06,580 --> 00:36:08,640
And when we generated
our items controller,

680
00:36:08,640 --> 00:36:13,430
that made a handy folder for us
in views that relates to items,

681
00:36:13,430 --> 00:36:18,130
and I made this new.html.erb page.

682
00:36:18,130 --> 00:36:21,320
>> So, this is another reason
why Rails is awesome.

683
00:36:21,320 --> 00:36:27,270
It's really easy to submit and
transfer data dealing with resources

684
00:36:27,270 --> 00:36:28,500
that you made in routes.

685
00:36:28,500 --> 00:36:33,670
So, all we have to do, in
order to tell the app that this

686
00:36:33,670 --> 00:36:38,650
is information about our to-do
list items, is say form_for: item.

687
00:36:38,650 --> 00:36:39,380
That's it.

688
00:36:39,380 --> 00:36:42,150
>> And then, we're just telling
it what URL to direct

689
00:36:42,150 --> 00:36:49,660
to after we're done submitting
the form, and it's items_path.

690
00:36:49,660 --> 00:36:51,690
And we can look at what
that is in a second.

691
00:36:51,690 --> 00:36:53,840
But for now, let's just
go out to the form.

692
00:36:53,840 --> 00:36:57,820
>> So, if you remember from when I
was talking about Ruby for loops,

693
00:36:57,820 --> 00:37:04,180
it was array.each do number, and then,
every time we went through the loop,

694
00:37:04,180 --> 00:37:08,330
it did something to, or it printed
out the next number in the list.

695
00:37:08,330 --> 00:37:12,190
>> This is similar syntax doing
something slightly different.

696
00:37:12,190 --> 00:37:24,030
It's saying, basically, all it's saying
is, I want to relate this form to,

697
00:37:24,030 --> 00:37:26,530
it's giving, right.

698
00:37:26,530 --> 00:37:28,810
Let me rephrase again.

699
00:37:28,810 --> 00:37:35,340
>> It's relating the form items, so
these things we see to this form,

700
00:37:35,340 --> 00:37:36,550
that we've made for item.

701
00:37:36,550 --> 00:37:38,950
So it's just a way of kind
of tying everything together.

702
00:37:38,950 --> 00:37:40,910
I'm not going to go
into it too much detail.

703
00:37:40,910 --> 00:37:43,710
But basically, what we've
done is we're saying,

704
00:37:43,710 --> 00:37:48,320
for this form that we've made for this
item, we want to have a title field,

705
00:37:48,320 --> 00:37:53,830
and the label will be "title,"
and it'll be a text field.

706
00:37:53,830 --> 00:37:58,110
>> And this, all that this syntax is
doing, is kind of generating HTML.

707
00:37:58,110 --> 00:38:01,360
You'll see it doesn't look
like HTML, mostly because

708
00:38:01,360 --> 00:38:05,290
of these kind of weird symbols
on either end of the text.

709
00:38:05,290 --> 00:38:09,160
And what that's saying is, we
are going to want Ruby code,

710
00:38:09,160 --> 00:38:11,490
or we're going to want HTML
eventually, but we want

711
00:38:11,490 --> 00:38:14,350
to use some Ruby to generate that HTML.

712
00:38:14,350 --> 00:38:17,760
>> And so this is just sticking
Ruby code into HTML.

713
00:38:17,760 --> 00:38:21,077
So, we can see this is plain
HTML, H1 new item close H1.

714
00:38:21,077 --> 00:38:21,910
That looks familiar.

715
00:38:21,910 --> 00:38:23,900
That's stuff we've seen in lecture.

716
00:38:23,900 --> 00:38:27,570
We can see these p-tags that
also look pretty familiar,

717
00:38:27,570 --> 00:38:32,940
but the form itself, the HTML
is mainly generated by Ruby code

718
00:38:32,940 --> 00:38:34,540
that you've stuck in there.

719
00:38:34,540 --> 00:38:37,100
>> And you can see, actually
why don't we do this.

720
00:38:37,100 --> 00:38:41,560

721
00:38:41,560 --> 00:38:42,950
I think we can do this.

722
00:38:42,950 --> 00:38:49,310

723
00:38:49,310 --> 00:38:51,890
This may be small.

724
00:38:51,890 --> 00:38:55,090
Yeah, this is probably too small,
but what you can do on your own,

725
00:38:55,090 --> 00:39:00,950
is you can inspect the HTML
of a page by right-clicking,

726
00:39:00,950 --> 00:39:02,970
and then clicking Inspect Element.

727
00:39:02,970 --> 00:39:06,180
And you can see the actual
HTML that our Ruby code built.

728
00:39:06,180 --> 00:39:09,950
And you'll see there is a form
tag, there is a label tag,

729
00:39:09,950 --> 00:39:12,850
there's a bunch of, a
text field tag, and so

730
00:39:12,850 --> 00:39:15,870
you'll see of the results
of this HTML that we created

731
00:39:15,870 --> 00:39:18,980
using Ruby, which is kind of cool.

732
00:39:18,980 --> 00:39:24,360
>> All right, and, I believe that's
it, for just making a new item

733
00:39:24,360 --> 00:39:26,740
and showing on the screen.

734
00:39:26,740 --> 00:39:30,020
Any questions now, before
we get into our last chunk,

735
00:39:30,020 --> 00:39:33,500
which is dealing with databases?

736
00:39:33,500 --> 00:39:34,000
No?

737
00:39:34,000 --> 00:39:35,650
Okay, cool.

738
00:39:35,650 --> 00:39:39,335
>> And as you saw again, it actually
really only took a couple steps.

739
00:39:39,335 --> 00:39:44,440
It took generating a controller,
adding a "new" and "create" action,

740
00:39:44,440 --> 00:39:49,660
so that the controller could
deal with requests for items/new

741
00:39:49,660 --> 00:39:52,600
and so that the controller
could deal with information

742
00:39:52,600 --> 00:39:58,620
that came in after submit of
this data relating to our item.

743
00:39:58,620 --> 00:40:01,000
And then, making the form.

744
00:40:01,000 --> 00:40:05,575
>> So, pretty simple actually, even though
again, it seems like a lot of steps.

745
00:40:05,575 --> 00:40:08,690
>> AUDIENCE 1: Did you already
create a model for items?

746
00:40:08,690 --> 00:40:10,950
>> SPEAKER: No, so, we
don't have a model yet.

747
00:40:10,950 --> 00:40:15,680
Right now, all we have is this
Rails construct, a resource,

748
00:40:15,680 --> 00:40:17,930
that really can take any shape.

749
00:40:17,930 --> 00:40:20,610
So, what we're about
to do is make a model,

750
00:40:20,610 --> 00:40:25,320
so that we can put
this resource, an item,

751
00:40:25,320 --> 00:40:29,060
into a database with a set structure.

752
00:40:29,060 --> 00:40:33,395
>> So the way that creating
models work in Rails,

753
00:40:33,395 --> 00:40:40,290
let me go to the next, So to-do
list with MVC see Part 3 of 3.

754
00:40:40,290 --> 00:40:44,860
>> So the way you create a model
in Rails is, again pretty easy,

755
00:40:44,860 --> 00:40:47,000
it's kind of a one-line thing.

756
00:40:47,000 --> 00:40:51,250
You say "rails generate model,"
similar to "rails generate controller."

757
00:40:51,250 --> 00:40:52,490
You give it a name.

758
00:40:52,490 --> 00:40:54,050
We're going to call it "Item."

759
00:40:54,050 --> 00:40:58,960
And again, by convention, you
usually capitalize and don't

760
00:40:58,960 --> 00:41:01,120
pluralize the names of models.

761
00:41:01,120 --> 00:41:04,520
You can call them whenever you
want, but just by convention,

762
00:41:04,520 --> 00:41:07,130
and so it makes your code
more readable by others,

763
00:41:07,130 --> 00:41:09,390
generally this is the convention.

764
00:41:09,390 --> 00:41:12,030
>> And then, you tell it,
basically, what columns

765
00:41:12,030 --> 00:41:17,610
do you want in your database
for this particular model.

766
00:41:17,610 --> 00:41:21,380
So we're saying, we want
a title column, and that's

767
00:41:21,380 --> 00:41:26,460
going to hold strings, which, not
surprisingly, is similar to the string

768
00:41:26,460 --> 00:41:29,740
data type that you worked with
that CS50 library implemented.

769
00:41:29,740 --> 00:41:31,840
It's just a set of characters.

770
00:41:31,840 --> 00:41:37,360
>> And we're going to have a notes column.

771
00:41:37,360 --> 00:41:39,820
So, we're kind of items and
then notes about those items.

772
00:41:39,820 --> 00:41:42,569
And that's just going to be a bunch
of text, so similar to string,

773
00:41:42,569 --> 00:41:44,290
but just gives you more space.

774
00:41:44,290 --> 00:41:51,650
>> So, you can think about this as
setting up the structure of a database.

775
00:41:51,650 --> 00:41:53,850
This hasn't actually made a table yet.

776
00:41:53,850 --> 00:41:57,420
All this does is says, I'm
going to make a file that's

777
00:41:57,420 --> 00:42:03,000
going to basically be able
to be made into a database

778
00:42:03,000 --> 00:42:05,180
once you kind of confirm
that everything's okay.

779
00:42:05,180 --> 00:42:09,770
>> So, if you run this, it makes
a file with a really long name.

780
00:42:09,770 --> 00:42:14,231
It's going to be in the database
folder, in the migrate folder,

781
00:42:14,231 --> 00:42:15,980
and it's going to have
a bunch of numbers,

782
00:42:15,980 --> 00:42:20,557
and then say create-- this is
a typo, it should be items--

783
00:42:20,557 --> 00:42:22,390
but, it's going to look
something like this.

784
00:42:22,390 --> 00:42:23,450
This is the format that it'll look like.

785
00:42:23,450 --> 00:42:25,850
So it's a bunch of numbers,
and then create, and then

786
00:42:25,850 --> 00:42:30,650
whatever your model name is.

787
00:42:30,650 --> 00:42:44,400
>> And if we go to that file, it won't
be in this one, it will be in MVC one.

788
00:42:44,400 --> 00:42:52,380
If we go to that file,
migrate, we can see

789
00:42:52,380 --> 00:43:00,470
that this file is now set up to create
a table with a string column called

790
00:43:00,470 --> 00:43:02,432
"title" and a text
column called "notes."

791
00:43:02,432 --> 00:43:04,140
So we're all set up
to make our database.

792
00:43:04,140 --> 00:43:07,290
We haven't yet, but
we're set up to do it.

793
00:43:07,290 --> 00:43:11,990
And then, in order to make it, luckily,
this is all set up for you on the IDEs,

794
00:43:11,990 --> 00:43:16,330
but basically, Rails by default
uses a database called SQLite.

795
00:43:16,330 --> 00:43:19,180
Often, when you push to
production mode you'll

796
00:43:19,180 --> 00:43:22,430
want to switch to different databases,
but for the sake of this final project,

797
00:43:22,430 --> 00:43:28,660
and honestly, for small web
apps in general, SQLite is fine.

798
00:43:28,660 --> 00:43:31,760
>> And it has the word SQL in
it, so, not surprisingly, it's

799
00:43:31,760 --> 00:43:34,870
kind of similar to the MySQL
databases you're using.

800
00:43:34,870 --> 00:43:39,040
It's kind of a lighter version of it.

801
00:43:39,040 --> 00:43:41,090
>> Another beauty of Ruby is
that you don't actually

802
00:43:41,090 --> 00:43:43,220
have to deal with any SQL whatsoever.

803
00:43:43,220 --> 00:43:45,710
Ruby deals with all of those.

804
00:43:45,710 --> 00:43:51,360
I think you've seen at this
point "INSERT table at"

805
00:43:51,360 --> 00:43:54,380
and you have a bunch
of long SQL commands.

806
00:43:54,380 --> 00:43:56,290
Ruby does that for you which is amazing.

807
00:43:56,290 --> 00:43:57,370
Or sorry, not Ruby.

808
00:43:57,370 --> 00:44:00,600
Rails does that for
you, which is awesome.

809
00:44:00,600 --> 00:44:04,000
So you don't have to deal with any
SQL when you're dealing with Ruby.

810
00:44:04,000 --> 00:44:08,205
>> So we have this file, which
we don't need to edit,

811
00:44:08,205 --> 00:44:11,080
because we already set it up when
we said "rails generate controller"

812
00:44:11,080 --> 00:44:12,170
and we gave it the types.

813
00:44:12,170 --> 00:44:14,140
And now, we can create this database.

814
00:44:14,140 --> 00:44:18,010
And the way you do that, is by
running the command "rake db:migrate."

815
00:44:18,010 --> 00:44:23,130
And that says, actually make
this table, with these columns,

816
00:44:23,130 --> 00:44:26,190
this set up, that I can
now insert data into.

817
00:44:26,190 --> 00:44:30,252

818
00:44:30,252 --> 00:44:32,210
At this point, you've
made your table, and it's

819
00:44:32,210 --> 00:44:38,020
ready to be queried in any way you want.

820
00:44:38,020 --> 00:44:43,060
So, not surprisingly,
we have a database,

821
00:44:43,060 --> 00:44:45,340
but we don't really
know what to do with it.

822
00:44:45,340 --> 00:44:48,380
Where do you think we go?

823
00:44:48,380 --> 00:44:52,550
Which of our MVC tells us what
we're going to do with information?

824
00:44:52,550 --> 00:44:55,186
>> AUDIENCE 1: Controllers?

825
00:44:55,186 --> 00:44:56,310
SPEAKER: Controllers, yeah.

826
00:44:56,310 --> 00:44:58,101
So we're going to go
back to our controller

827
00:44:58,101 --> 00:45:01,800
in order to set up a way to
actually put data into the database,

828
00:45:01,800 --> 00:45:05,282
and take data out of the database.

829
00:45:05,282 --> 00:45:07,490
And we don't have to make
a new controller this time,

830
00:45:07,490 --> 00:45:09,940
because this is all still
dealing with our items, right?

831
00:45:09,940 --> 00:45:11,898
We're putting items in,
we're taking items out,

832
00:45:11,898 --> 00:45:13,810
so it's still in our items controller.

833
00:45:13,810 --> 00:45:21,640
>> And we can see, let's go to app,
controllers, items controller.

834
00:45:21,640 --> 00:45:26,470

835
00:45:26,470 --> 00:45:28,040
>> Okay.

836
00:45:28,040 --> 00:45:32,380
There are a lot of changes,
but the important ones are,

837
00:45:32,380 --> 00:45:40,790
we have a "show," which now accesses
this Item model that we made.

838
00:45:40,790 --> 00:45:44,130
So remember, we called our
model Item with a capital I.

839
00:45:44,130 --> 00:45:48,110
And this is basically taking
care of the SQL command for you.

840
00:45:48,110 --> 00:45:53,250
This is saying go to the database,
get out an item with the specific ID

841
00:45:53,250 --> 00:45:54,810
that I'm looking for.

842
00:45:54,810 --> 00:45:59,770
>> And it knows which ID
you're looking for by way

843
00:45:59,770 --> 00:46:05,010
of passing data in through the
"view" which I'll show you later.

844
00:46:05,010 --> 00:46:10,250
And, also now, our "create"
looks a little different.

845
00:46:10,250 --> 00:46:13,080
We are now, again, dealing
with a SQL command.

846
00:46:13,080 --> 00:46:16,180
We're saying, "Put this new
item into the database."

847
00:46:16,180 --> 00:46:19,590
>> And, this is basically
just for security reasons.

848
00:46:19,590 --> 00:46:23,970
We have a private method
that just kind of takes

849
00:46:23,970 --> 00:46:29,780
care of making sure inserting and
taking things out of the database

850
00:46:29,780 --> 00:46:30,830
is done safely.

851
00:46:30,830 --> 00:46:33,420
So, you don't really have
to know too much about that,

852
00:46:33,420 --> 00:46:35,670
but it's just a security thing.

853
00:46:35,670 --> 00:46:41,240
>> And, we're going to save
an item to the database,

854
00:46:41,240 --> 00:46:45,220
and then redirect to the show page.

855
00:46:45,220 --> 00:46:46,750
>> So this is a lot to take in.

856
00:46:46,750 --> 00:46:52,030
I think I'm going to stop here,
and pause, talk a little bit more

857
00:46:52,030 --> 00:46:56,310
about, generally, the structure that
we've seen, and a couple key takeaways.

858
00:46:56,310 --> 00:46:59,650
And, I think that you'll
find, if you follow

859
00:46:59,650 --> 00:47:03,290
through the instructions
on the GitHub page,

860
00:47:03,290 --> 00:47:05,670
this was a lot of
information thrown at you.

861
00:47:05,670 --> 00:47:11,020
It's a whole new framework,
but I think it really

862
00:47:11,020 --> 00:47:14,220
boils down to a couple key steps.

863
00:47:14,220 --> 00:47:19,900
>> Like I mentioned before, setting
up the web app is four steps.

864
00:47:19,900 --> 00:47:22,580
We went over them before,
they're laid out pretty clearly

865
00:47:22,580 --> 00:47:24,560
in the Getting Started page.

866
00:47:24,560 --> 00:47:27,270
And basically, any
action want to implement

867
00:47:27,270 --> 00:47:29,480
is kind of, max, three or four steps.

868
00:47:29,480 --> 00:47:33,290
>> You usually have to add some
item into the controller

869
00:47:33,290 --> 00:47:39,420
in order to tell the app how to handle
a certain set of information that

870
00:47:39,420 --> 00:47:42,520
gets passed to it, and you
have to edit a view in order

871
00:47:42,520 --> 00:47:46,640
to tell your web app what
to do with that information

872
00:47:46,640 --> 00:47:48,930
that it gets passed from the controller.

873
00:47:48,930 --> 00:47:54,190
>> And then, dealing with the
model, I think, again, there

874
00:47:54,190 --> 00:47:56,860
are a couple of key syntax things.

875
00:47:56,860 --> 00:47:59,530
Basically, the @items is kind
of like a global variable.

876
00:47:59,530 --> 00:48:03,030
You can pass it into your
view, which is pretty cool.

877
00:48:03,030 --> 00:48:06,110
So, if I go to my views
for these things--

878
00:48:06,110 --> 00:48:09,370
"for these things," that was very
specific-- if I go to my view for,

879
00:48:09,370 --> 00:48:16,480
let's say, "items index," you can
see that I can access this items

880
00:48:16,480 --> 00:48:18,740
variable if I use Ruby code.

881
00:48:18,740 --> 00:48:21,160
So, what that did in the
controller is, it says,

882
00:48:21,160 --> 00:48:26,090
I want to make a global items variable.

883
00:48:26,090 --> 00:48:29,170
>> And what I'm going to do
with it, is this SQL command.

884
00:48:29,170 --> 00:48:33,420
I'm going to go into my
table, get all of the items,

885
00:48:33,420 --> 00:48:35,900
and put them all into
this items variable.

886
00:48:35,900 --> 00:48:38,650
And then in my view, I'm going to
use these items variable, which

887
00:48:38,650 --> 00:48:43,420
just has a big list of all of the
items, and this is the for loop syntax

888
00:48:43,420 --> 00:48:44,640
we talked about earlier.

889
00:48:44,640 --> 00:48:48,669
For each of them, I'm going to print
out the title, and the notes about them.

890
00:48:48,669 --> 00:48:49,835
So this is super convenient.

891
00:48:49,835 --> 00:48:52,570

892
00:48:52,570 --> 00:48:58,410
If you'll notice, a SQL command, two
words, instead of, however many, 15.

893
00:48:58,410 --> 00:49:03,280
And, a global variable, all
you have to do is say, @items.

894
00:49:03,280 --> 00:49:08,729
>> So, this is a really easy way of
passing information back and forth

895
00:49:08,729 --> 00:49:10,270
from the model, view, and controller.

896
00:49:10,270 --> 00:49:14,920
You'll notice, all three
of those, all three parts,

897
00:49:14,920 --> 00:49:18,100
are accessed in these
very simple three lines.

898
00:49:18,100 --> 00:49:22,250
This is saying go to the model, or
go to the database, get out data.

899
00:49:22,250 --> 00:49:26,110
This is saying, pass it into the view.

900
00:49:26,110 --> 00:49:29,280
>> So, I think that example is
actually a pretty nice way

901
00:49:29,280 --> 00:49:31,790
of demonstrating why Rails is so cool.

902
00:49:31,790 --> 00:49:35,130
Three lines, we were able
to access our database,

903
00:49:35,130 --> 00:49:38,630
get information to our controller,
and then pass it back to the view.

904
00:49:38,630 --> 00:49:40,450
And again, you'll see
a very similar theme

905
00:49:40,450 --> 00:49:44,410
for all of the rest of the
methods you might want to do.

906
00:49:44,410 --> 00:49:47,520
>> You'll see of some
reference to the database,

907
00:49:47,520 --> 00:49:49,221
and the way of passing it into the view.

908
00:49:49,221 --> 00:49:51,220
And, then the views are
responsible for handling

909
00:49:51,220 --> 00:49:54,700
that data in whatever way you want.

910
00:49:54,700 --> 00:50:01,320
>> So in the final version, again,
I've added a couple more fields

911
00:50:01,320 --> 00:50:06,774
to this controller, which allow you
to delete, and allow you to edit.

912
00:50:06,774 --> 00:50:09,440
The edit looks pretty similar to
create, because it makes sense,

913
00:50:09,440 --> 00:50:12,900
you'll also want to be putting
data back into the database,

914
00:50:12,900 --> 00:50:15,700
like you do when you save a new item.

915
00:50:15,700 --> 00:50:20,702
>> Delete is a little bit
different, because like I

916
00:50:20,702 --> 00:50:23,660
mentioned before, it doesn't have
its home page that you visit in order

917
00:50:23,660 --> 00:50:24,410
to delete an item.

918
00:50:24,410 --> 00:50:28,210
That'd be kind of annoying, if you had
to go to items/delete/ and then you

919
00:50:28,210 --> 00:50:30,690
have to tell it which
specific item to delete.

920
00:50:30,690 --> 00:50:34,650
So, the delete procedure
is slightly different,

921
00:50:34,650 --> 00:50:36,830
but still follows the
same general conventions.

922
00:50:36,830 --> 00:50:40,300
>> It'll have some reference to
the database, where it goes,

923
00:50:40,300 --> 00:50:42,980
in order to find the correct
information and delete it,

924
00:50:42,980 --> 00:50:46,740
and it'll have some
reference back to the view,

925
00:50:46,740 --> 00:50:50,170
so that the view knows what to do.

926
00:50:50,170 --> 00:50:53,150
>> So this is Ruby on Rails.

927
00:50:53,150 --> 00:50:57,710
I would take a look at the
GitHub, if you're interested.

928
00:50:57,710 --> 00:51:02,900
There's a lot of really cool
documentation setting up

929
00:51:02,900 --> 00:51:05,870
users is really easy in Rails,
compared to almost anything else.

930
00:51:05,870 --> 00:51:08,140
There's a gem for it
called "devise" that

931
00:51:08,140 --> 00:51:11,900
takes care of a lot of
authentication issues,

932
00:51:11,900 --> 00:51:15,290
makes a bunch of pages and
controllers in the background

933
00:51:15,290 --> 00:51:20,140
that you just have to set up links to,
and your sign-in sign-out functionality

934
00:51:20,140 --> 00:51:22,130
is pretty much taken care of.

935
00:51:22,130 --> 00:51:31,820
>> It has cool visualization features, it
has really cool, basically everything.

936
00:51:31,820 --> 00:51:34,530
So, I would highly recommend using it.

937
00:51:34,530 --> 00:51:38,031
It's super popular these days, too.

938
00:51:38,031 --> 00:51:38,530
Yeah.

939
00:51:38,530 --> 00:51:42,140
If you have any questions, feel
free to email me, or stick around,

940
00:51:42,140 --> 00:51:43,240
I'll be here.

941
00:51:43,240 --> 00:51:45,560
And thank you so much for coming.

942
00:51:45,560 --> 00:51:50,938
