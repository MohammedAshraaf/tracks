1
00:00:00,000 --> 00:00:03,840
>> [MUSIC PLAYING]

2
00:00:03,840 --> 00:00:05,770

3
00:00:05,770 --> 00:00:08,690
>> DOUG LLOYD: So by now we're old
pros at web programming, right?

4
00:00:08,690 --> 00:00:12,140
And we've covered several
languages in individual videos.

5
00:00:12,140 --> 00:00:14,690
And now let's do one more, JavaScript.

6
00:00:14,690 --> 00:00:17,370
>> First the good news, JavaScript
is a modern programming

7
00:00:17,370 --> 00:00:21,410
language much like PHP whose
syntax is derived from C,

8
00:00:21,410 --> 00:00:22,830
so that's a good place to start.

9
00:00:22,830 --> 00:00:25,880
It's about as old as PHP, as well,
having been around about 20 years.

10
00:00:25,880 --> 00:00:28,600
It was invented around
the same time as PHP.

11
00:00:28,600 --> 00:00:32,240
And JavaScript is actually pretty
fundamental to the user experience

12
00:00:32,240 --> 00:00:32,740
of the web.

13
00:00:32,740 --> 00:00:34,448
In fact, there are
three languages that I

14
00:00:34,448 --> 00:00:38,480
would say sort of make up the
user experience of interacting

15
00:00:38,480 --> 00:00:42,650
with the website, html,
css, and JavaScript.

16
00:00:42,650 --> 00:00:46,030
And so now let's talk a
little bit about JavaScript.

17
00:00:46,030 --> 00:00:50,301
>> The bad news, though, with JavaScript is
that it sets a lot of rules for itself,

18
00:00:50,301 --> 00:00:51,300
and then it breaks them.

19
00:00:51,300 --> 00:00:54,010
And JavaScript can actually be
kind of challenging to learn,

20
00:00:54,010 --> 00:00:57,000
because it's unlike C and
PHP, which are very structured

21
00:00:57,000 --> 00:01:00,270
and have very rigid rules
for how things can work.

22
00:01:00,270 --> 00:01:03,690
JavaScript has kind
of gotten so flexible

23
00:01:03,690 --> 00:01:06,650
that maybe things aren't going to
work the way we expect them to,

24
00:01:06,650 --> 00:01:09,830
and maybe we really can't learn
our first programming language

25
00:01:09,830 --> 00:01:10,769
as a JavaScript.

26
00:01:10,769 --> 00:01:12,810
So maybe because it doesn't
set itself any rules,

27
00:01:12,810 --> 00:01:15,754
and it doesn't really
enforce good coding habits.

28
00:01:15,754 --> 00:01:18,170
But now we've hopefully developed
some good coding habits,

29
00:01:18,170 --> 00:01:21,470
and so we can start to foray
into JavaScript a little bit.

30
00:01:21,470 --> 00:01:25,750
>> To write JavaScript, similar to opening
up a C file with a dot C extension

31
00:01:25,750 --> 00:01:29,770
or a PHP file with a dot PHP extension,
all we need to do is open up a file

32
00:01:29,770 --> 00:01:31,764
with the dot js file extension.

33
00:01:31,764 --> 00:01:34,430
We don't need to have any special
delimiters like we did in PHP.

34
00:01:34,430 --> 00:01:36,750
That sort of angle
bracket question mark PHP

35
00:01:36,750 --> 00:01:40,300
that we're used to from that, the way
we tell our browser that what we have is

36
00:01:40,300 --> 00:01:43,502
JavaScript is by including
it in an html tag,

37
00:01:43,502 --> 00:01:46,210
and we'll see a little bit about
how to do that in just a moment.

38
00:01:46,210 --> 00:01:48,210
>> The other thing that makes
JavaScript different,

39
00:01:48,210 --> 00:01:50,580
though, is that it runs client side.

40
00:01:50,580 --> 00:01:53,430
So recall with PHP that
we could never really see

41
00:01:53,430 --> 00:01:57,041
the PHP that underlined a website.

42
00:01:57,041 --> 00:01:59,040
If we ever viewed the
page source, we would only

43
00:01:59,040 --> 00:02:02,830
see the html that was
generated by that PHP.

44
00:02:02,830 --> 00:02:04,900
But JavaScript runs client side.

45
00:02:04,900 --> 00:02:06,710
Your JavaScript runs on your computer.

46
00:02:06,710 --> 00:02:09,050
And that's why you can do
things like add blockers.

47
00:02:09,050 --> 00:02:09,550
Right?

48
00:02:09,550 --> 00:02:12,704
Ad blocking is usually done by
killing all of the JavaScript

49
00:02:12,704 --> 00:02:14,370
that is running on a particular website.

50
00:02:14,370 --> 00:02:19,000
And because it would have to
run on your machine client side,

51
00:02:19,000 --> 00:02:21,910
you can just stop the
JavaScript for running entirely.

52
00:02:21,910 --> 00:02:27,030
That also means that when you use
a website that includes JavaScript,

53
00:02:27,030 --> 00:02:32,450
you have to send the JavaScript source
code as part of your http response

54
00:02:32,450 --> 00:02:34,159
to the client when they request it.

55
00:02:34,159 --> 00:02:35,950
And so you might not
want to use JavaScript

56
00:02:35,950 --> 00:02:38,395
to do really sensitive things
like passing information

57
00:02:38,395 --> 00:02:41,020
about users' passwords back and
forth, because they're actually

58
00:02:41,020 --> 00:02:45,610
going to receive all of the source code,
not just the html that is generated,

59
00:02:45,610 --> 00:02:49,030
such as would be the case with say PHP.

60
00:02:49,030 --> 00:02:51,620
>> So how do we include JavaScript
in our html to start with?

61
00:02:51,620 --> 00:02:54,520
Well, similar to CSS, actually,
is sort of how we do it here.

62
00:02:54,520 --> 00:02:56,190
With CSS we have style tags.

63
00:02:56,190 --> 00:03:00,760
And inside of those style tags,
we can define a CSS style sheet.

64
00:03:00,760 --> 00:03:03,450
Similarly with JavaScript
can we open up script tags,

65
00:03:03,450 --> 00:03:06,660
another html tag we didn't
talk about in our html video,

66
00:03:06,660 --> 00:03:09,720
and write JavaScript in
between those script tags.

67
00:03:09,720 --> 00:03:13,960
Also though, like CSS, we
could link in outside CSS files

68
00:03:13,960 --> 00:03:15,900
and pull them into our program that way.

69
00:03:15,900 --> 00:03:18,280
With CSS we can also,
excuse me, with JavaScript

70
00:03:18,280 --> 00:03:23,240
we can also specify the source
attribute of the script tag

71
00:03:23,240 --> 00:03:25,720
to link in JavaScript
separately, so you don't

72
00:03:25,720 --> 00:03:27,680
have to write it in
between script tags, we

73
00:03:27,680 --> 00:03:29,600
can link it in using
that script tag as well.

74
00:03:29,600 --> 00:03:33,230
And just as with the case with CSS where
we recommended that it was probably

75
00:03:33,230 --> 00:03:36,090
in your best interest to write
your CSS in a separate file in case

76
00:03:36,090 --> 00:03:38,500
you need to change it,
similarly do we recommend

77
00:03:38,500 --> 00:03:40,720
that you write your
JavaScript in separate files

78
00:03:40,720 --> 00:03:45,460
and use the script tags source
attribute to tie your JavaScript

79
00:03:45,460 --> 00:03:49,520
into your html, your web page.

80
00:03:49,520 --> 00:03:52,610
>> So JavaScript variables, we'll
start talking about the syntax here.

81
00:03:52,610 --> 00:03:53,600
And we'll go through
this kind of quickly,

82
00:03:53,600 --> 00:03:56,640
because we've done this in PHP, so
this should all be pretty familiar.

83
00:03:56,640 --> 00:03:59,490
So variables in JavaScript are
very similar to PHP variables.

84
00:03:59,490 --> 00:04:03,270
There's no type specifier, and
when you introduce a variable,

85
00:04:03,270 --> 00:04:05,070
you prefix it with the var keyword.

86
00:04:05,070 --> 00:04:07,750
In PHP we would do something
like this, dollar sign x.

87
00:04:07,750 --> 00:04:09,950
That's how we indicated
a variable, but no, we

88
00:04:09,950 --> 00:04:12,060
don't mention the type
of the variable at all.

89
00:04:12,060 --> 00:04:15,124
We would say something like
dollar sign x equals 44 in PHP.

90
00:04:15,124 --> 00:04:17,040
If we were doing the
same thing in JavaScript,

91
00:04:17,040 --> 00:04:19,589
we would say var x equals 44.

92
00:04:19,589 --> 00:04:22,780
So var is sort of our way
of introducing a variable.

93
00:04:22,780 --> 00:04:26,850
That's perhaps a bit more intuitive
than just dollar sign variable.

94
00:04:26,850 --> 00:04:29,080
>> Again, since there's no
data types, we could do this

95
00:04:29,080 --> 00:04:34,490
with any data type, strings,
anything else would all be var.

96
00:04:34,490 --> 00:04:37,260
Conditionals, all of our
old friends from C and PHP

97
00:04:37,260 --> 00:04:41,640
are still available, so we have if,
else if, else, switch and question

98
00:04:41,640 --> 00:04:42,240
mark colon.

99
00:04:42,240 --> 00:04:45,890
Switch remaining as flexible as it
was in PHP, but all of these you're

100
00:04:45,890 --> 00:04:46,930
familiar with by now.

101
00:04:46,930 --> 00:04:49,900
And similarly with loops are
the old favorites of while,

102
00:04:49,900 --> 00:04:52,700
do while, and for still available to us.

103
00:04:52,700 --> 00:04:55,880
So already we know a lot of the
basic JavaScript sort of fundamentals

104
00:04:55,880 --> 00:05:01,800
just by virtue of having quite a bit
of knowledge now about C and PHP.

105
00:05:01,800 --> 00:05:03,670
>> What about functions in JavaScript?

106
00:05:03,670 --> 00:05:08,199
Well, similar to PHP every function is
introduced with the function keyword.

107
00:05:08,199 --> 00:05:10,740
You say function, and then you
begin to define your function.

108
00:05:10,740 --> 00:05:12,531
What's a little different
about JavaScript,

109
00:05:12,531 --> 00:05:15,700
though is the ability to have
what's called an anonymous function.

110
00:05:15,700 --> 00:05:18,880
So you can define functions
that don't have a name.

111
00:05:18,880 --> 00:05:21,222
This is something we
really haven't seen before.

112
00:05:21,222 --> 00:05:23,430
We'll really use the concept
of an anonymous function

113
00:05:23,430 --> 00:05:27,880
a little later in this
video, because it'll

114
00:05:27,880 --> 00:05:31,530
make a little more sense in context
when we see it in a particular situation

115
00:05:31,530 --> 00:05:33,120
that I've crafted here.

116
00:05:33,120 --> 00:05:35,710
But let's just take a look
at what a simple JavaScript

117
00:05:35,710 --> 00:05:37,850
function might look like.

118
00:05:37,850 --> 00:05:40,610
>> So I've gone ahead and
opened up my CS50 IDE

119
00:05:40,610 --> 00:05:43,690
and I've already run Apache
to begin my server running.

120
00:05:43,690 --> 00:05:46,800
And I have this file
open called Home.html.

121
00:05:46,800 --> 00:05:48,330
And I'll zoom in a little bit here.

122
00:05:48,330 --> 00:05:52,090
And basically, you can see the
Home.html is just a bunch of buttons.

123
00:05:52,090 --> 00:05:55,291
And I'm claiming at the top here
that this is the JavaScript section

124
00:05:55,291 --> 00:05:55,790
materials.

125
00:05:55,790 --> 00:05:59,490
So there's a bunch of buttons here,
but what do these buttons actually do?

126
00:05:59,490 --> 00:06:03,662
>> Well, we'll head over to my IED,
and I have Home.html open here.

127
00:06:03,662 --> 00:06:05,620
At the very beginning,
here's where I'm linking

128
00:06:05,620 --> 00:06:07,500
in all of my JavaScript source files.

129
00:06:07,500 --> 00:06:08,000
Right?

130
00:06:08,000 --> 00:06:12,440
So I have anonymous.js, clock.js,
I'm using the source attribute

131
00:06:12,440 --> 00:06:14,440
of the script tag to link in file.

132
00:06:14,440 --> 00:06:18,660
So I haven't written any
JavaScript directly into this file,

133
00:06:18,660 --> 00:06:21,790
but I've pulled in all the
JavaScript I've written separately.

134
00:06:21,790 --> 00:06:24,540
And if we scroll down here, this
should all look somewhat familiar

135
00:06:24,540 --> 00:06:27,090
with a little bit of new syntax.

136
00:06:27,090 --> 00:06:32,655
We have here header tag for
functions and then a button.

137
00:06:32,655 --> 00:06:35,530
I have an input that's a type button,
and apparently when I click it,

138
00:06:35,530 --> 00:06:38,130
I'm going to call some
function alert date.

139
00:06:38,130 --> 00:06:41,792
And this is how we can sort of mix up
a little bit of JavaScript and html.

140
00:06:41,792 --> 00:06:44,500
They actually play pretty nicely
together, and so apparently when

141
00:06:44,500 --> 00:06:48,730
I click on this button, I'm going
to call some function alert date.

142
00:06:48,730 --> 00:06:53,660
And similarly have I defined behaviors
for all of the other buttons that

143
00:06:53,660 --> 00:06:56,440
are on that home.html page,
which we'll keep returning

144
00:06:56,440 --> 00:06:59,172
to during the course of this video.

145
00:06:59,172 --> 00:07:00,880
But let's go back up
here and take a look

146
00:07:00,880 --> 00:07:03,850
at clock.js, which is the
JavaScript file that I

147
00:07:03,850 --> 00:07:07,370
wrote that has this first function
we're going to take a look at.

148
00:07:07,370 --> 00:07:11,630
As you can see, I begin my JavaScript
function with the keyword function,

149
00:07:11,630 --> 00:07:14,560
and I've given this one a
name, it's called alert date.

150
00:07:14,560 --> 00:07:18,710
Inside of there, I apparently create a
new local variable called current date.

151
00:07:18,710 --> 00:07:21,500
And I'm going to assign
an equal to a new date.

152
00:07:21,500 --> 00:07:24,430
And we could get into a lot of
detail as to what a date is,

153
00:07:24,430 --> 00:07:27,060
and really JavaScript is so
big that we can't possibly

154
00:07:27,060 --> 00:07:28,330
cover everything in one video.

155
00:07:28,330 --> 00:07:32,220
But suffice it to say, this is going
to return to me a data item that

156
00:07:32,220 --> 00:07:35,470
encapsulates the current date and time.

157
00:07:35,470 --> 00:07:39,100
I'm storing that in a variable that I'm
apparently going to alert current date.

158
00:07:39,100 --> 00:07:41,300
>> Well, what does alert
current date look like?

159
00:07:41,300 --> 00:07:46,460
Let's take a look at the file itself
back over in the browser window.

160
00:07:46,460 --> 00:07:49,551
So again, this is the button that I
have tied to, this named function.

161
00:07:49,551 --> 00:07:51,800
And I click it there and
look what it did, it alerted.

162
00:07:51,800 --> 00:07:56,140
It popped up this sort of box telling
me that the current time is, apparently

163
00:07:56,140 --> 00:07:59,370
it's November 4 at
10:43:43 in the morning.

164
00:07:59,370 --> 00:08:02,345
And if I click it again, now
it's a few seconds later, right?

165
00:08:02,345 --> 00:08:03,720
So that's all this function does.

166
00:08:03,720 --> 00:08:07,670
When I click this button, it
pops up an alert message to me.

167
00:08:07,670 --> 00:08:13,806

168
00:08:13,806 --> 00:08:15,690
So there's really not
too much to functions

169
00:08:15,690 --> 00:08:19,110
that's different from PHP,
just a little bit of new syntax

170
00:08:19,110 --> 00:08:22,500
that comes with working with JavaScript.

171
00:08:22,500 --> 00:08:24,650
>> Arrays in JavaScript are
pretty straightforward.

172
00:08:24,650 --> 00:08:27,200
To declare an array, you use
the square brackets syntax

173
00:08:27,200 --> 00:08:30,090
that we're familiar with from PHP.

174
00:08:30,090 --> 00:08:33,432
And similar to PHP, we
also can mix data types.

175
00:08:33,432 --> 00:08:35,140
So this array, both
of these arrays would

176
00:08:35,140 --> 00:08:36,960
be perfectly legitimate JavaScript.

177
00:08:36,960 --> 00:08:42,500
One that's all integers, and one that
is mixed up different data types.

178
00:08:42,500 --> 00:08:45,020
>> What's something very different
in JavaScript, though?

179
00:08:45,020 --> 00:08:47,020
That's the notion of an object.

180
00:08:47,020 --> 00:08:50,240
So perhaps you've heard of
object oriented programming.

181
00:08:50,240 --> 00:08:53,370
We don't do a lot of it in CS50,
but we will do a little bit of it

182
00:08:53,370 --> 00:08:55,670
here in the context of JavaScript.

183
00:08:55,670 --> 00:08:59,100
Now JavaScript has the ability to
behave as an object oriented programming

184
00:08:59,100 --> 00:09:02,615
language, but it is not itself
exclusively an object oriented

185
00:09:02,615 --> 00:09:03,490
programming language.

186
00:09:03,490 --> 00:09:05,281
And this again comes
back to why I said, it

187
00:09:05,281 --> 00:09:10,610
can be very challenging to learn
JavaScript as your first programming

188
00:09:10,610 --> 00:09:13,890
language, because it doesn't
really fit a particular paradigm.

189
00:09:13,890 --> 00:09:16,430
>> C on the other hand is a
functional programming language.

190
00:09:16,430 --> 00:09:22,270
If we want to, functions are
sort of the big boss man, right?

191
00:09:22,270 --> 00:09:24,410
They dictate what
happens everything else.

192
00:09:24,410 --> 00:09:26,600
We want to change variables,
we call functions.

193
00:09:26,600 --> 00:09:28,220
We do things to functions.

194
00:09:28,220 --> 00:09:31,250
Objects instead, in an
object oriented language,

195
00:09:31,250 --> 00:09:35,937
objects sort of become the star and
functions become sort of secondary.

196
00:09:35,937 --> 00:09:38,270
But what is an object, what
is this notion of an object?

197
00:09:38,270 --> 00:09:40,880
Well, if it helps, think
about it at first sort

198
00:09:40,880 --> 00:09:44,540
of like a C structure or a struct
that we've learned about before.

199
00:09:44,540 --> 00:09:47,430
In C, a structure contains
a number of fields,

200
00:09:47,430 --> 00:09:51,174
and maybe we now might start to
call these fields properties.

201
00:09:51,174 --> 00:09:53,590
But the properties never really
stand on their own, right?

202
00:09:53,590 --> 00:09:56,410
If I define a structure for a car
like this with the following two

203
00:09:56,410 --> 00:10:00,750
fields or properties, one an
integer for the year of the car

204
00:10:00,750 --> 00:10:04,290
and another a 10 character
string for the model of the car,

205
00:10:04,290 --> 00:10:07,150
I can say something like this,
I can declare a new variable

206
00:10:07,150 --> 00:10:10,080
of type struct car herbie.

207
00:10:10,080 --> 00:10:13,730
And then I can say something
like herbie.year equals 1,963,

208
00:10:13,730 --> 00:10:15,850
and herbie.model equals Beetle.

209
00:10:15,850 --> 00:10:17,000
That's OK.

210
00:10:17,000 --> 00:10:19,680
I'm using the fields in the
context of the structure,

211
00:10:19,680 --> 00:10:22,290
but I could never just
say something like this.

212
00:10:22,290 --> 00:10:22,790
Right?

213
00:10:22,790 --> 00:10:26,836
I can't use the field name
independent of the structure.

214
00:10:26,836 --> 00:10:28,210
It's sort of a fundamental thing.

215
00:10:28,210 --> 00:10:32,990
>> So fields being
fundamental to C structures

216
00:10:32,990 --> 00:10:39,050
are very similar to properties being
fundamental to JavaScript objects.

217
00:10:39,050 --> 00:10:42,080
But what makes them
particularly interesting

218
00:10:42,080 --> 00:10:46,230
is that objects can also have what
are called methods, which are really

219
00:10:46,230 --> 00:10:50,730
just a fancy word for functions that
are inherent to the object as well.

220
00:10:50,730 --> 00:10:55,340
So it's a function that can only be
called in the context of an object.

221
00:10:55,340 --> 00:10:59,200
Only an object that has defined
this function inside of its,

222
00:10:59,200 --> 00:11:02,020
if you think about a
struct, the function

223
00:11:02,020 --> 00:11:05,720
is defined inside those defining
curly braces of the structure.

224
00:11:05,720 --> 00:11:07,980
So it only means something
to the structure.

225
00:11:07,980 --> 00:11:10,960
And that's sort of what we're doing
here with objects and methods.

226
00:11:10,960 --> 00:11:13,580
It's basically like we're
defining a function that

227
00:11:13,580 --> 00:11:16,670
only makes sense on a
particular object, and so we

228
00:11:16,670 --> 00:11:19,440
call that a method of the object.

229
00:11:19,440 --> 00:11:23,180
And we can never call that
function independent of the object,

230
00:11:23,180 --> 00:11:29,260
just like we can't say year or model
independent of the struct in C.

231
00:11:29,260 --> 00:11:32,300
>> So functional programming
paradigms look something like this.

232
00:11:32,300 --> 00:11:35,450
Function and then when you pass
in the object as a parameter.

233
00:11:35,450 --> 00:11:38,650
In an object oriented programming
languages, this sort of gets

234
00:11:38,650 --> 00:11:43,464
flipped, and we would think about
it like this, object.function.

235
00:11:43,464 --> 00:11:45,380
So it sort of that dot
operator again implying

236
00:11:45,380 --> 00:11:49,540
that it's some sort of property
or attribute of the object itself.

237
00:11:49,540 --> 00:11:53,240
But this is what an object
oriented programming language

238
00:11:53,240 --> 00:11:57,150
might do to make a function
call on a method, again, which

239
00:11:57,150 --> 00:12:00,260
is just a special word for a function
that is inherent to an object.

240
00:12:00,260 --> 00:12:03,440
This is what that
syntax might look like.

241
00:12:03,440 --> 00:12:09,360
And so we'll start to see some of
this in the context of JavaScript.

242
00:12:09,360 --> 00:12:12,470
>> You can also think about an object
sort of like an associative array,

243
00:12:12,470 --> 00:12:14,160
which we're familiar with from PHP.

244
00:12:14,160 --> 00:12:17,720
Remember an associative array allows
us to have key value pairs, instead

245
00:12:17,720 --> 00:12:23,040
of having indexes 0, one, two, three,
and so on like we're used to from C

246
00:12:23,040 --> 00:12:23,940
arrays.

247
00:12:23,940 --> 00:12:27,472
Associative arrays can map
words, such as in the PHP video,

248
00:12:27,472 --> 00:12:29,180
we were talking about
toppings of pizzas.

249
00:12:29,180 --> 00:12:31,180
And so we had an array
called pizzas, and we

250
00:12:31,180 --> 00:12:36,670
had cheese was a key and $8.99 was the
value, and then pepperoni was a key,

251
00:12:36,670 --> 00:12:39,190
$9.99 was a value, and so on.

252
00:12:39,190 --> 00:12:43,300
And so we can also think about an
object sort of similar to an associative

253
00:12:43,300 --> 00:12:43,840
array.

254
00:12:43,840 --> 00:12:47,020
And so this syntax here
would create a new object

255
00:12:47,020 --> 00:12:50,950
called herbie with two
properties inside of it.

256
00:12:50,950 --> 00:12:57,310
Year, which is assigned the value 1963,
and model, which is assigned the string

257
00:12:57,310 --> 00:12:58,140
Beetle.

258
00:12:58,140 --> 00:13:01,770
>> And notice here that I'm using
single quotes in JavaScript.

259
00:13:01,770 --> 00:13:05,570
You can use single or double quotes
when you're talking about strings.

260
00:13:05,570 --> 00:13:07,772
It's just conventionally
the case that most times

261
00:13:07,772 --> 00:13:10,230
when you're writing JavaScript,
you just use single quotes.

262
00:13:10,230 --> 00:13:15,050
But I could use double quotes here, and
that would be perfectly fine as well.

263
00:13:15,050 --> 00:13:17,470
>> So remember how in
PHP we had this notion

264
00:13:17,470 --> 00:13:22,730
of a for each loop that would allow us
to iterate over all of the key value

265
00:13:22,730 --> 00:13:25,270
pairs of an associative
array, because we

266
00:13:25,270 --> 00:13:29,050
didn't have this ability to iterate
through 0, one, two, three, four,

267
00:13:29,050 --> 00:13:30,710
and so on?

268
00:13:30,710 --> 00:13:35,010
JavaScript has something very similar,
but it's not called a for each loop,

269
00:13:35,010 --> 00:13:38,960
it's called a for in loops.

270
00:13:38,960 --> 00:13:42,890
So if I said to me like
this, for var key in object,

271
00:13:42,890 --> 00:13:48,670
that's sort of similar to saying
for each something as something.

272
00:13:48,670 --> 00:13:53,850
But all I'm doing here is iterating
through all of the keys of my object.

273
00:13:53,850 --> 00:13:56,070
And inside of the curly
braces there, I would

274
00:13:56,070 --> 00:14:03,410
use object square brackets key to refer
to the value at that key location.

275
00:14:03,410 --> 00:14:05,400
>> Alternatively, there's
even another approach.

276
00:14:05,400 --> 00:14:10,880
If I just only care about the
values, I can say for key of object,

277
00:14:10,880 --> 00:14:12,360
and just use key inside.

278
00:14:12,360 --> 00:14:17,240
So for var key in object, I have
to use object square brackets

279
00:14:17,240 --> 00:14:19,340
key inside the loop.

280
00:14:19,340 --> 00:14:24,580
For var key of object, I can
just use key inside the loop,

281
00:14:24,580 --> 00:14:29,040
because I'm just specifically
talking about the values there.

282
00:14:29,040 --> 00:14:32,630
>> So let's maybe take a
look at the difference

283
00:14:32,630 --> 00:14:35,670
just to quickly show you
the difference between four

284
00:14:35,670 --> 00:14:40,730
in and for of with a very specific
array, which we have here, week array.

285
00:14:40,730 --> 00:14:43,616
So I have to find a new array
that I filled with seven strings,

286
00:14:43,616 --> 00:14:46,240
Monday, Tuesday, Wednesday,
Thursday, Friday, Saturday, Sunday.

287
00:14:46,240 --> 00:14:50,530
And I want to now iterate
through this array,

288
00:14:50,530 --> 00:14:53,090
printing out certain information.

289
00:14:53,090 --> 00:14:58,780
If I use a for in loop
to print out information,

290
00:14:58,780 --> 00:15:00,710
what do you think I'm going to get?

291
00:15:00,710 --> 00:15:01,710
Well, let's take a look.

292
00:15:01,710 --> 00:15:05,300
And before we jump over
to my browser window,

293
00:15:05,300 --> 00:15:08,090
just know that
console.log is sort of one

294
00:15:08,090 --> 00:15:10,630
way of doing a print F in JavaScript.

295
00:15:10,630 --> 00:15:12,040
But what is the console?

296
00:15:12,040 --> 00:15:14,940
Well, that's what we're going
to go take a look at right now.

297
00:15:14,940 --> 00:15:16,850
>> OK, so we're back here
in my browser window,

298
00:15:16,850 --> 00:15:19,410
and I'm going to open
up my developer tools.

299
00:15:19,410 --> 00:15:22,290
Again, I'm just hitting F12
to open up developer tools.

300
00:15:22,290 --> 00:15:25,670
And notice that here at the
top I've chosen console.

301
00:15:25,670 --> 00:15:28,480
So this is the notion
of a developer console,

302
00:15:28,480 --> 00:15:30,500
and it will allow us to
print information out,

303
00:15:30,500 --> 00:15:33,000
sort of like the terminal, but
as you'll see a little later,

304
00:15:33,000 --> 00:15:37,720
we can also type information in
to interact with our web page.

305
00:15:37,720 --> 00:15:42,320
I'm going to zoom in a little bit here,
and I'm gonna now click on for in test.

306
00:15:42,320 --> 00:15:45,230
And four in test-- I'm not gonna
show you the code for it right now,

307
00:15:45,230 --> 00:15:47,479
but you'll get it if you
download the source code that

308
00:15:47,479 --> 00:15:50,380
is associated with this video--
is just that for in loop

309
00:15:50,380 --> 00:15:52,610
that we saw just a
second ago on the slide.

310
00:15:52,610 --> 00:15:54,810
>> So I'm gonna click that
button, and over here,

311
00:15:54,810 --> 00:15:58,440
here's what has printed out in the
console, 0,one, two, three, four, five,

312
00:15:58,440 --> 00:15:58,940
six.

313
00:15:58,940 --> 00:16:02,490
I didn't print out the information
inside those array locations,

314
00:16:02,490 --> 00:16:05,180
because I used a for in loop.

315
00:16:05,180 --> 00:16:10,670
And inside the body of the loop, I
just printed out key not object key.

316
00:16:10,670 --> 00:16:18,600
But if I now clear my console, and I
switch to for of test, and four of test

317
00:16:18,600 --> 00:16:22,500
I say I use for of loop
instead and print out key,

318
00:16:22,500 --> 00:16:28,079
if I click that, now I'm getting the
actual elements inside of my object

319
00:16:28,079 --> 00:16:29,120
or my array in this case.

320
00:16:29,120 --> 00:16:31,760
My array of week days.

321
00:16:31,760 --> 00:16:33,480
I printed out Monday,
Tuesday, Wednesday.

322
00:16:33,480 --> 00:16:36,930
So that's the difference between
a for in loop, which prints out

323
00:16:36,930 --> 00:16:43,410
just the keys if you just use key
inside of the body of the loop,

324
00:16:43,410 --> 00:16:46,850
and a for of loop, which prints
out the values if you use just

325
00:16:46,850 --> 00:16:48,870
key inside the body of the loop.

326
00:16:48,870 --> 00:16:52,380
>> All right, how do we now start to
concatenate strings and maybe mix up

327
00:16:52,380 --> 00:16:57,220
some variables with interpolation
like we were able to do in PHP?

328
00:16:57,220 --> 00:16:59,410
Well, we're pretty familiar
with this from PHP.

329
00:16:59,410 --> 00:17:04,109
This is how we would do it using the
dot operator to concatenate strings.

330
00:17:04,109 --> 00:17:06,260
In JavaScript, though,
we actually use something

331
00:17:06,260 --> 00:17:09,290
called the plus operator, which
is maybe even a little bit more

332
00:17:09,290 --> 00:17:10,470
intuitive, right?

333
00:17:10,470 --> 00:17:12,609
We're adding a bunch
of strings together.

334
00:17:12,609 --> 00:17:14,520
So let's head back
over and see what this

335
00:17:14,520 --> 00:17:18,693
will print if we're trying to print out
all of the information in week array.

336
00:17:18,693 --> 00:17:20,859
All right, so under here
under string concatenation,

337
00:17:20,859 --> 00:17:24,822
I have two options, string building
V1 and then string building V2.

338
00:17:24,822 --> 00:17:26,530
And we'll see why we
need V2 in a second.

339
00:17:26,530 --> 00:17:28,610
But I'm gonna click on
string building V1, which

340
00:17:28,610 --> 00:17:30,360
is the code we were
just taking a look at,

341
00:17:30,360 --> 00:17:32,980
the console.log with all of the pluses.

342
00:17:32,980 --> 00:17:35,910
Let's see if this prints
out what we expect.

343
00:17:35,910 --> 00:17:39,939
>> Monday is day number 01 of the week,
Tuesday is day number 11 of the week.

344
00:17:39,939 --> 00:17:41,730
Well, what I was trying
to do there was get

345
00:17:41,730 --> 00:17:46,280
it to print out Monday is day number
one, Tuesday is day number two.

346
00:17:46,280 --> 00:17:50,140
But it seems like I'm
always printing out one.

347
00:17:50,140 --> 00:17:51,260
Well, why is that?

348
00:17:51,260 --> 00:17:55,600
Well, it turns out, take another look
at this little snippet of code here.

349
00:17:55,600 --> 00:18:00,160
Notice that we're using the plus
operator in two different contexts.

350
00:18:00,160 --> 00:18:03,221
>> And so here's where maybe things
that we've kind of been saying,

351
00:18:03,221 --> 00:18:03,970
oh, it's so great.

352
00:18:03,970 --> 00:18:05,910
We don't deal with data types anymore.

353
00:18:05,910 --> 00:18:08,220
But here's where the fact
that we lose data types

354
00:18:08,220 --> 00:18:10,960
can actually be a bit
of a problem for us.

355
00:18:10,960 --> 00:18:16,260
Now that the plus operator is used to
concatenate strings and add numbers

356
00:18:16,260 --> 00:18:19,550
together, JavaScript has
to make its best guess

357
00:18:19,550 --> 00:18:22,030
as to what I want it to do for me.

358
00:18:22,030 --> 00:18:23,900
And in this case, it guessed wrong.

359
00:18:23,900 --> 00:18:29,340
It just concatenated day, which would be
0, one, two, three, four, five, or six,

360
00:18:29,340 --> 00:18:32,060
and then it just concatenated
that and then concatenated one.

361
00:18:32,060 --> 00:18:35,020
It didn't actually add them together.

362
00:18:35,020 --> 00:18:37,320
And so these languages,
PHP and JavaScript,

363
00:18:37,320 --> 00:18:39,196
that abstracts away
this notion of types,

364
00:18:39,196 --> 00:18:40,820
you don't have to deal with it anymore.

365
00:18:40,820 --> 00:18:43,600
They do still have types under the hood.

366
00:18:43,600 --> 00:18:46,780
And we can, in situations
like this, leverage that fact

367
00:18:46,780 --> 00:18:49,240
by saying something
like maybe this, which

368
00:18:49,240 --> 00:18:53,210
is telling JavaScript, by the
way, treat this as an integer,

369
00:18:53,210 --> 00:18:57,100
don't treat it as a string, even
though we're mixing together strings

370
00:18:57,100 --> 00:18:58,940
and integers here.

371
00:18:58,940 --> 00:19:02,204
>> It's just one of those things
that it seems so great in context

372
00:19:02,204 --> 00:19:04,120
that we don't have to
deal with types anymore,

373
00:19:04,120 --> 00:19:05,828
but sometimes you'll
run into a situation

374
00:19:05,828 --> 00:19:09,110
exactly like this where the fact that
you don't have control over types

375
00:19:09,110 --> 00:19:11,220
can backfire on you
if you're not careful.

376
00:19:11,220 --> 00:19:18,285
And so if we pop back over to IDE, I'm
going to clear out my console again,

377
00:19:18,285 --> 00:19:20,660
and I'm going to click string
building version two, which

378
00:19:20,660 --> 00:19:23,052
is where I use that parse int function.

379
00:19:23,052 --> 00:19:25,260
Now it's printing out
information that I'm expecting.

380
00:19:25,260 --> 00:19:29,330
Monday's day number one, Tuesday
is day number two, and so on.

381
00:19:29,330 --> 00:19:31,170
>> So let's talk about functions again.

382
00:19:31,170 --> 00:19:34,790
I promised we would talk about anonymous
functions, and now the context for that

383
00:19:34,790 --> 00:19:36,360
has finally arrived.

384
00:19:36,360 --> 00:19:39,980
So before we do so, let's talk again
about arrays for just a second.

385
00:19:39,980 --> 00:19:42,120
So arrays are a special
case of an object.

386
00:19:42,120 --> 00:19:45,180
In fact, everything in
JavaScript is actually an object.

387
00:19:45,180 --> 00:19:47,190
So functions are a
special case of an object,

388
00:19:47,190 --> 00:19:49,770
integers are a special
case of an object,

389
00:19:49,770 --> 00:19:52,152
but arrays specifically
have a number of methods.

390
00:19:52,152 --> 00:19:55,110
Remember because they're objects,
they can have properties and methods.

391
00:19:55,110 --> 00:19:58,600
They have a number of methods that
can be applied to those objects.

392
00:19:58,600 --> 00:20:01,197
There's a method called
size, array.size,

393
00:20:01,197 --> 00:20:03,030
which will return to
you as you might expect

394
00:20:03,030 --> 00:20:05,120
the number of elements in your array.

395
00:20:05,120 --> 00:20:08,480
array.pop, sort of like
our notion of popping off

396
00:20:08,480 --> 00:20:11,110
of a stack, if you recall
from our stacks video,

397
00:20:11,110 --> 00:20:13,810
removes the last element from the array.

398
00:20:13,810 --> 00:20:17,110
array.push adds a new element
to the end of an array.

399
00:20:17,110 --> 00:20:20,910
array.shift is sort of
like DQ, it splices out

400
00:20:20,910 --> 00:20:23,610
the very first element of an array.

401
00:20:23,610 --> 00:20:27,549
>> But there's also another special
method of an array called map.

402
00:20:27,549 --> 00:20:29,340
And this is sort of an
interesting concept.

403
00:20:29,340 --> 00:20:30,930
So what is the idea of a map?

404
00:20:30,930 --> 00:20:33,880
You'll actually see this
in several other languages,

405
00:20:33,880 --> 00:20:38,550
and we're not talking about a
sort of cartographers map here,

406
00:20:38,550 --> 00:20:41,480
we're talking about a mapping function.

407
00:20:41,480 --> 00:20:44,110
In the context we're
talking about here, a map

408
00:20:44,110 --> 00:20:47,950
is a special operation we
can perform on an array

409
00:20:47,950 --> 00:20:51,630
to apply a particular function
to every element of that array.

410
00:20:51,630 --> 00:20:55,190
and so we would say in
this case, maybe array.map,

411
00:20:55,190 --> 00:21:00,330
and inside of it, we're passing
into map is a function that we want

412
00:21:00,330 --> 00:21:02,430
to be applied to every single element.

413
00:21:02,430 --> 00:21:07,299
So it's sort of analogous to using
a loop to iterate over every element

414
00:21:07,299 --> 00:21:09,340
and apply a particular
function to every element,

415
00:21:09,340 --> 00:21:14,830
just JavaScript has this built in
notion of a mapping that can be applied.

416
00:21:14,830 --> 00:21:19,700
And this is a great context to
talk about an anonymous function.

417
00:21:19,700 --> 00:21:22,370
>> So let's say we have
this array of integers.

418
00:21:22,370 --> 00:21:25,370
It's called nums, and it's got five
things in it, one, two, three, four,

419
00:21:25,370 --> 00:21:26,410
five.

420
00:21:26,410 --> 00:21:30,620
Now I want to map some
function on to this array.

421
00:21:30,620 --> 00:21:34,337
I want to have a function apply
to every element of the array.

422
00:21:34,337 --> 00:21:37,420
Well, let's say that what I want to
do is just double all of the elements.

423
00:21:37,420 --> 00:21:42,520
What I could do is just use a loop
for var I equals 0, I is less than

424
00:21:42,520 --> 00:21:47,390
or equal to 4, I plus, plus, and
then double every single number.

425
00:21:47,390 --> 00:21:49,580
But I can also do something like this.

426
00:21:49,580 --> 00:21:53,420
I can say nums was formerly
one, two, three, four, five,

427
00:21:53,420 --> 00:21:58,310
now, though, I would like you to
apply a mapping onto this array

428
00:21:58,310 --> 00:22:00,400
where I would like you
to double every number.

429
00:22:00,400 --> 00:22:02,540
And that's exactly
what's happening here.

430
00:22:02,540 --> 00:22:06,870
But notice what I'm passing
in as the argument to map.

431
00:22:06,870 --> 00:22:09,080
This is an anonymous function.

432
00:22:09,080 --> 00:22:11,140
And notice I haven't given
this function a name,

433
00:22:11,140 --> 00:22:13,290
I've only given it a parameter list.

434
00:22:13,290 --> 00:22:16,370
And so this is an example
of an anonymous function.

435
00:22:16,370 --> 00:22:21,270
>> We generally would never call this
function outside of the context of map.

436
00:22:21,270 --> 00:22:24,110
We're defining it as a parameter
to map, and so we don't really

437
00:22:24,110 --> 00:22:27,910
need to have a name for it if the
only thing that cares about is map

438
00:22:27,910 --> 00:22:30,339
and it's defined right
there inside of map.

439
00:22:30,339 --> 00:22:31,880
And so this is an anonymous function.

440
00:22:31,880 --> 00:22:34,680
We have not been able
to do this previously.

441
00:22:34,680 --> 00:22:38,400
Map some function that
accepts one parameter, num,

442
00:22:38,400 --> 00:22:41,890
and what that function does
is returns num times 2.

443
00:22:41,890 --> 00:22:45,330
And so after this
mapping has been applied,

444
00:22:45,330 --> 00:22:50,090
this is now what nums looks
like, two, four, six, eight, 10.

445
00:22:50,090 --> 00:22:52,090
And we'll pop over to my
browser window and just

446
00:22:52,090 --> 00:22:55,240
take a look at this
really quickly as well.

447
00:22:55,240 --> 00:22:58,000
>> So I have another button here
in my home page called double.

448
00:22:58,000 --> 00:23:03,570
And when I click double, and it tells
me before it was one, two, three, four,

449
00:23:03,570 --> 00:23:07,250
five after two, four, six, eight, 10.

450
00:23:07,250 --> 00:23:11,930
And if I go back and click double
again, two, four, six, eight, 10.

451
00:23:11,930 --> 00:23:17,400
And then after, four,
eight, 12, 16, and then 20.

452
00:23:17,400 --> 00:23:20,440
And what am I doing in this function?

453
00:23:20,440 --> 00:23:25,210
Well, if we just pop over to IDE, and
I pull up my anonymous function, here

454
00:23:25,210 --> 00:23:28,780
on line seven through 13, I'm
doing a little bit fancy work here,

455
00:23:28,780 --> 00:23:32,240
but I'm just printing out
what's currently in the array.

456
00:23:32,240 --> 00:23:36,580
Then on line 16, 17,
and 18, there's my map.

457
00:23:36,580 --> 00:23:40,930
This is where I'm applying this doubling
function to every single element.

458
00:23:40,930 --> 00:23:43,530
And then a little further down,
I'm just doing the same thing

459
00:23:43,530 --> 00:23:46,640
I was doing before, except now I'm
printing out the contents of the array

460
00:23:46,640 --> 00:23:48,167
afterwards.

461
00:23:48,167 --> 00:23:50,500
But all I've done here is
just use an anonymous function

462
00:23:50,500 --> 00:23:53,640
to map across an entire array.

463
00:23:53,640 --> 00:23:58,466
>> So one more big topic to talk about in
JavaScript is the notion of an event.

464
00:23:58,466 --> 00:24:01,590
An event is something that just happens
when a user interacts with your web

465
00:24:01,590 --> 00:24:04,715
page, so maybe they click something,
or maybe the page is finished loading,

466
00:24:04,715 --> 00:24:07,200
or maybe they've moved
their mouse over something,

467
00:24:07,200 --> 00:24:09,290
or they've typed something
in an input field.

468
00:24:09,290 --> 00:24:14,260
All of these things are events
that are occurring on our web page.

469
00:24:14,260 --> 00:24:17,460
And JavaScript has the
capability to support something

470
00:24:17,460 --> 00:24:21,760
called an event handler, which
is a callback function that

471
00:24:21,760 --> 00:24:23,329
responds to an html event.

472
00:24:23,329 --> 00:24:24,620
And what's a callback function?

473
00:24:24,620 --> 00:24:27,328
Well, it's generally just another
name for an anonymous function.

474
00:24:27,328 --> 00:24:30,170
It's a function that
responds to an event.

475
00:24:30,170 --> 00:24:34,130
And this is where we come to the
idea of binding certain functions

476
00:24:34,130 --> 00:24:38,060
to a particular html attribute.

477
00:24:38,060 --> 00:24:41,420
Most html elements have
support for an attribute

478
00:24:41,420 --> 00:24:45,170
that we didn't talk about in the html
video for something like on click

479
00:24:45,170 --> 00:24:50,540
or on hover or on load,
all of these events

480
00:24:50,540 --> 00:24:53,120
that you can then write functions
that deal with those events

481
00:24:53,120 --> 00:24:56,090
when those events
occur on your web page.

482
00:24:56,090 --> 00:24:59,170
>> And so maybe your html
looks something like this.

483
00:24:59,170 --> 00:25:02,240
And I have two buttons here,
button one and button two,

484
00:25:02,240 --> 00:25:04,620
and here I have currently
defined nothing,

485
00:25:04,620 --> 00:25:11,170
but this is where the attribute on
click is apparently part of my html tag.

486
00:25:11,170 --> 00:25:15,220
So apparently when I define what's
going on inside of that attribute,

487
00:25:15,220 --> 00:25:18,590
it's going to be some JavaScript
function that responds to the event

488
00:25:18,590 --> 00:25:24,360
presumably of clicking on
button one or button two.

489
00:25:24,360 --> 00:25:28,580
>> What's kind of cool about this is we
can write a generic event handler.

490
00:25:28,580 --> 00:25:32,370
And this event Handler will
create an event object.

491
00:25:32,370 --> 00:25:37,000
And the event object will tell us
which of the two buttons was clicked.

492
00:25:37,000 --> 00:25:38,064
Now how does that work?

493
00:25:38,064 --> 00:25:39,730
Well, it might look something like this.

494
00:25:39,730 --> 00:25:44,860
So we will first define our buttons
to have a response to the callback

495
00:25:44,860 --> 00:25:47,470
function that will be called
when the button is clicked,

496
00:25:47,470 --> 00:25:49,520
we'll call event alert name.

497
00:25:49,520 --> 00:25:53,320
And notice in both cases we're
passing in this event parameter.

498
00:25:53,320 --> 00:25:55,460
So we call this function
or when this function

499
00:25:55,460 --> 00:26:00,330
is triggered by the event happening,
it's going to create this event object

500
00:26:00,330 --> 00:26:03,300
and pass it as a
parameter to alert name.

501
00:26:03,300 --> 00:26:07,270
And that event object is
going to contain information

502
00:26:07,270 --> 00:26:09,800
about which button was clicked.

503
00:26:09,800 --> 00:26:11,580
And how does it do that?

504
00:26:11,580 --> 00:26:13,654
Well, it might look something like this.

505
00:26:13,654 --> 00:26:15,570
So now in my separate
JavaScript file, I might

506
00:26:15,570 --> 00:26:17,420
have to find this
function alert name, which

507
00:26:17,420 --> 00:26:19,500
again accepts that event parameter.

508
00:26:19,500 --> 00:26:24,640
And then here is where I'm detecting
which button was triggered,

509
00:26:24,640 --> 00:26:28,100
var trigger equals event
dot source element.

510
00:26:28,100 --> 00:26:33,150
What was the source that created
this event object that was passed in?

511
00:26:33,150 --> 00:26:36,390
Was it button one or was it button two?

512
00:26:36,390 --> 00:26:40,710
>> And then here all I'm doing is
printing out trigger.innerhtml.

513
00:26:40,710 --> 00:26:43,860
Well, in this case, in this
context, trigger.innerhtml

514
00:26:43,860 --> 00:26:45,940
is just what is written on the button.

515
00:26:45,940 --> 00:26:48,830
It just so happens if we jump
back for a second, that would

516
00:26:48,830 --> 00:26:51,670
be what's in between those button tags.

517
00:26:51,670 --> 00:26:54,150
It will be button one or button two.

518
00:26:54,150 --> 00:26:57,320
And let's take a look at
how this event handler would

519
00:26:57,320 --> 00:27:01,080
look if we had it running in practice.

520
00:27:01,080 --> 00:27:03,850
>> So first of all, you've
opened up events.js,

521
00:27:03,850 --> 00:27:06,517
which is the JavaScript file where
I have defined this function.

522
00:27:06,517 --> 00:27:08,558
And as you can see, it's
pretty much exactly what

523
00:27:08,558 --> 00:27:10,230
we just saw on the slide a second ago.

524
00:27:10,230 --> 00:27:14,890
And I will go over to the
home page we've been using.

525
00:27:14,890 --> 00:27:17,660
And I have here button
one and button two.

526
00:27:17,660 --> 00:27:19,820
And I'll click on button one.

527
00:27:19,820 --> 00:27:23,930
You clicked on button one, if you
can see right here in the alert.

528
00:27:23,930 --> 00:27:25,810
OK.

529
00:27:25,810 --> 00:27:28,980
Click on button two, you
clicked on a button two.

530
00:27:28,980 --> 00:27:32,150
>> So both buttons have the
same function call, right?

531
00:27:32,150 --> 00:27:35,840
They both were alert name
event, but this event object

532
00:27:35,840 --> 00:27:41,900
that gets created when we click on
it tells us which button was clicked.

533
00:27:41,900 --> 00:27:44,650
We didn't have to write two separate
functions or deal with having

534
00:27:44,650 --> 00:27:46,470
to pass any additional information.

535
00:27:46,470 --> 00:27:48,220
We're just relying on
what JavaScript will

536
00:27:48,220 --> 00:27:53,772
do for us, which is to create that
sort of event object on our behalf.

537
00:27:53,772 --> 00:27:56,730
There's a lot more to JavaScript than
what we've covered in this video,

538
00:27:56,730 --> 00:27:58,521
but having these
fundamental should get you

539
00:27:58,521 --> 00:28:00,690
quite a long ways to
learning everything you'll

540
00:28:00,690 --> 00:28:04,030
need to know about this
interesting language.

541
00:28:04,030 --> 00:28:05,000
I'm Doug Lloyd.

542
00:28:05,000 --> 00:28:07,010
This is CS50.

543
00:28:07,010 --> 00:28:09,181
