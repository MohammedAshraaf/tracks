1
00:00:00,000 --> 00:00:05,054

2
00:00:05,054 --> 00:00:05,970
ZACK CHAUVIN: Awesome.

3
00:00:05,970 --> 00:00:06,780
So we'll get started.

4
00:00:06,780 --> 00:00:09,696
Thanks a bunch for coming and to the
hordes of people watching online,

5
00:00:09,696 --> 00:00:12,230
thanks as well for tuning in.

6
00:00:12,230 --> 00:00:13,870
So my name's Zack.

7
00:00:13,870 --> 00:00:17,210
And today we'll be talking about
how to create iPhone apps using

8
00:00:17,210 --> 00:00:18,990
a language called Objective-C.

9
00:00:18,990 --> 00:00:21,930
>> So my hope is that
after today, you'll feel

10
00:00:21,930 --> 00:00:26,270
empowered to take on tutorials that
will help you guide you on your way

11
00:00:26,270 --> 00:00:28,350
to starting iPhone applications.

12
00:00:28,350 --> 00:00:31,540
So hopefully, if you
came today, then you're

13
00:00:31,540 --> 00:00:34,120
a little bit interested
in this technology.

14
00:00:34,120 --> 00:00:37,570
But just in case, I'll try
and motivate a little bit

15
00:00:37,570 --> 00:00:40,570
why program for the iPhone
and then more specifically,

16
00:00:40,570 --> 00:00:43,320
why we program for Objective-C.

17
00:00:43,320 --> 00:00:44,980
>> So first of all, why iPhone?

18
00:00:44,980 --> 00:00:47,430
So people will tell you
all sorts of reasons.

19
00:00:47,430 --> 00:00:50,805
For me, iPhone's really exciting,
because it's what people around you

20
00:00:50,805 --> 00:00:52,060
are using.

21
00:00:52,060 --> 00:01:00,110
As you can see from this chart, iPhones
have the plurality of use in America.

22
00:01:00,110 --> 00:01:02,800
Especially at Harvard,
they're really well-used.

23
00:01:02,800 --> 00:01:05,170
And so creating iPhone
apps is really exciting,

24
00:01:05,170 --> 00:01:07,140
because your friends will be using them.

25
00:01:07,140 --> 00:01:11,160
>> As well, in case you're
motivated by other things,

26
00:01:11,160 --> 00:01:14,450
you can see that even if
Androids have a higher

27
00:01:14,450 --> 00:01:17,700
share of the market
in terms of downloads,

28
00:01:17,700 --> 00:01:20,830
iPhone consistently comes
up on top in terms of sales.

29
00:01:20,830 --> 00:01:24,620
So that's another great reason in case
you're interested in a job in tech

30
00:01:24,620 --> 00:01:26,121
later.

31
00:01:26,121 --> 00:01:26,620
Cool.

32
00:01:26,620 --> 00:01:30,810
So now you're sold on
programming for iPhones.

33
00:01:30,810 --> 00:01:32,250
But you still have choice.

34
00:01:32,250 --> 00:01:35,910
As you've probably heard, there's
a newer language called Swift.

35
00:01:35,910 --> 00:01:37,830
And both of those are great options.

36
00:01:37,830 --> 00:01:39,930
Personally, my background
is in Objective-C.

37
00:01:39,930 --> 00:01:43,615
And that's why I'll try and
sell you on Objective-C.

38
00:01:43,615 --> 00:01:44,990
But Swift's another great option.

39
00:01:44,990 --> 00:01:47,840
>> So why use Objective-C over Swift?

40
00:01:47,840 --> 00:01:52,540
The first reason is that Objective-C
has been around for a really long time.

41
00:01:52,540 --> 00:01:54,930
I believe it's like around 20 years.

42
00:01:54,930 --> 00:01:57,370
It's been around for a long time.

43
00:01:57,370 --> 00:02:01,580
And so because of that, there's a wealth
of resources that are available to you.

44
00:02:01,580 --> 00:02:06,520
>> And so I'll give you some examples of
tutorials at the end of this seminar.

45
00:02:06,520 --> 00:02:10,490
But you just type anything in, like
how to do this in Objective-C. It's

46
00:02:10,490 --> 00:02:12,480
everywhere, tutorials.

47
00:02:12,480 --> 00:02:14,700
There's a huge community
surrounding Objective-C

48
00:02:14,700 --> 00:02:17,350
because it's the commonplace thing.

49
00:02:17,350 --> 00:02:20,380
>> Similar to that, it's a
very established language.

50
00:02:20,380 --> 00:02:22,710
You guys have been
studying C this semester.

51
00:02:22,710 --> 00:02:27,480
And as you can see by the name,
it has a strong resemblance to C.

52
00:02:27,480 --> 00:02:29,320
We'll look at some Objective-C later.

53
00:02:29,320 --> 00:02:32,180
But certainly in its
origins, it came from C.

54
00:02:32,180 --> 00:02:36,652
And you'll see how that
presents itself in a language.

55
00:02:36,652 --> 00:02:38,110
Finally, it dominates the industry.

56
00:02:38,110 --> 00:02:41,410
So even though Swift is like
this new, fancy technology,

57
00:02:41,410 --> 00:02:46,440
you see, if you go to iPhone,
like if you go to app companies,

58
00:02:46,440 --> 00:02:49,527
you'll see that a lot of
them still use Objective-C.

59
00:02:49,527 --> 00:02:51,860
And that's either because
their code base was originally

60
00:02:51,860 --> 00:02:54,787
made in Objective-C or
for these other reasons

61
00:02:54,787 --> 00:02:57,370
that I've told you, namely that
there's a wealth of resources.

62
00:02:57,370 --> 00:02:59,500
They know that if they're
going to use a library,

63
00:02:59,500 --> 00:03:02,300
then it's been heavily tested
by other apps and such,

64
00:03:02,300 --> 00:03:05,080
whereas Swift code is
less heavily tested.

65
00:03:05,080 --> 00:03:07,290
So definitely reasons for both.

66
00:03:07,290 --> 00:03:12,060
But that's why personally I would
go with Objective-C right now.

67
00:03:12,060 --> 00:03:12,560
Cool.

68
00:03:12,560 --> 00:03:17,790
So you guys have been working
in the CS50 IDE this semester.

69
00:03:17,790 --> 00:03:21,900
And it turns out that in order
to program anything for iPhone,

70
00:03:21,900 --> 00:03:28,180
you have to use Xcode, which is the
native IDE for Objective-C and Swift.

71
00:03:28,180 --> 00:03:32,940
And so the caveat to that is that if
you want to develop for iPhone, then

72
00:03:32,940 --> 00:03:36,150
you have to have a Mac, because
this is only available for Mac.

73
00:03:36,150 --> 00:03:39,380
Of course there are workarounds, but
the best way to develop for an iPhone

74
00:03:39,380 --> 00:03:41,620
is on your Mac with Xcode.

75
00:03:41,620 --> 00:03:45,750
>> So that being said, let's
poke around in Xcode

76
00:03:45,750 --> 00:03:52,120
to see what this looks like and some
of the tools that we might use in here.

77
00:03:52,120 --> 00:03:53,810
So this is Xcode.

78
00:03:53,810 --> 00:03:54,780
There's a lot going on.

79
00:03:54,780 --> 00:04:00,170
It's a little bit more complex than
the IDE that you're used to from CS50.

80
00:04:00,170 --> 00:04:06,040
But the good news is that it's
been developed over time to really

81
00:04:06,040 --> 00:04:08,270
have all sorts of tools
that are really awesome.

82
00:04:08,270 --> 00:04:10,680
And I'll do my best to
show you some of these.

83
00:04:10,680 --> 00:04:14,650
>> In the center, we have your normal
text editor that you know and love.

84
00:04:14,650 --> 00:04:17,490
This is where you'll be
typing Objective-C. There

85
00:04:17,490 --> 00:04:20,670
are some examples of Objective-C
that we'll walk through later.

86
00:04:20,670 --> 00:04:25,390
On the left, we have our file directory,
exactly the same as the CS50 IDE.

87
00:04:25,390 --> 00:04:30,856
On the right, you have something
that helps you more closely examine

88
00:04:30,856 --> 00:04:32,230
the thing that you're looking at.

89
00:04:32,230 --> 00:04:39,326
For example, let's say we are going
to click on something like this.

90
00:04:39,326 --> 00:04:42,640
Here, let's do an easier example.

91
00:04:42,640 --> 00:04:44,610
>> So if we look at this
file, say we're trying

92
00:04:44,610 --> 00:04:46,900
to manipulate this thing right here.

93
00:04:46,900 --> 00:04:51,712
On the right, we get a panel in which
you can specify different things

94
00:04:51,712 --> 00:04:52,420
about that panel.

95
00:04:52,420 --> 00:04:55,610
Obviously you don't know what this
is yet, but just it for granted

96
00:04:55,610 --> 00:04:58,190
that this side is to make
little adjustments on the thing

97
00:04:58,190 --> 00:04:59,880
that you're working on right now.

98
00:04:59,880 --> 00:05:02,260
So in that way, it's nice to
have this IDE, because you

99
00:05:02,260 --> 00:05:05,130
don't have to do everything in code.

100
00:05:05,130 --> 00:05:08,750
Instead there's an option to
use the user interface to change

101
00:05:08,750 --> 00:05:12,410
little things about your application.

102
00:05:12,410 --> 00:05:17,130
>> Probably the best thing about Xcode
is the presence of the simulator.

103
00:05:17,130 --> 00:05:22,020
So today we'll be looking
at this application.

104
00:05:22,020 --> 00:05:22,520
OK.

105
00:05:22,520 --> 00:05:24,145
So I've been telling you little things.

106
00:05:24,145 --> 00:05:28,086

107
00:05:28,086 --> 00:05:29,710
I'm just typing out my little examples.

108
00:05:29,710 --> 00:05:31,565
So I have to remove
them before I compile.

109
00:05:31,565 --> 00:05:38,770

110
00:05:38,770 --> 00:05:39,350
>> Perfect.

111
00:05:39,350 --> 00:05:41,120
So it'll come up.

112
00:05:41,120 --> 00:05:45,220
We get this little simulator.

113
00:05:45,220 --> 00:05:47,785
And then the right away
you can see exactly how

114
00:05:47,785 --> 00:05:50,660
it would appear just like you have
the iPhone in front of you, which

115
00:05:50,660 --> 00:05:51,160
is really sweet.

116
00:05:51,160 --> 00:05:52,701
We're going to play around with this.

117
00:05:52,701 --> 00:05:56,380
It works just like your normal iPhone.

118
00:05:56,380 --> 00:06:03,100
>> And you can even do things like press
the Home button or shake it, rotate it,

119
00:06:03,100 --> 00:06:06,110
all sorts of awesome stuff that means
that your development process can

120
00:06:06,110 --> 00:06:07,140
be really quick.

121
00:06:07,140 --> 00:06:09,660
Instead of having to port it
out to your phone every time,

122
00:06:09,660 --> 00:06:10,951
you can just use the simulator.

123
00:06:10,951 --> 00:06:14,810
And we'll see how we can use that
to our advantage in a little bit.

124
00:06:14,810 --> 00:06:16,870
>> So that's Xcode for you.

125
00:06:16,870 --> 00:06:18,750
Super powerful IDE.

126
00:06:18,750 --> 00:06:22,490
Definitely if you're going to invest
some time developing in Objective-C,

127
00:06:22,490 --> 00:06:27,720
It's important to get to know and
love Xcode, because using this tool

128
00:06:27,720 --> 00:06:32,390
well will make it so much easier
for you to program in Objective-C.

129
00:06:32,390 --> 00:06:35,950
>> So that being said, this is
the first step to programming

130
00:06:35,950 --> 00:06:39,240
Objective-C is acquiring this Xcode.

131
00:06:39,240 --> 00:06:42,260
And that can be done through
the app store on your Mac.

132
00:06:42,260 --> 00:06:45,870
And that's pretty much the only
setup, in fact, is downloading this.

133
00:06:45,870 --> 00:06:48,440
Once you have this,
you're set up to develop

134
00:06:48,440 --> 00:06:52,617
for the iPhone, which is pretty sweet.

135
00:06:52,617 --> 00:06:53,950
Any questions, just let me know.

136
00:06:53,950 --> 00:06:56,080
>> STUDENT: What does NS
stand for in NSObject?

137
00:06:56,080 --> 00:06:56,980
>> ZACK CHAUVIN: Yeah.

138
00:06:56,980 --> 00:06:59,430
So we'll get a little
bit more into that.

139
00:06:59,430 --> 00:07:04,010
But you see NS everywhere
in the language Objective-C.

140
00:07:04,010 --> 00:07:08,430
And so it turns out that they've created
a whole bunch of objects for you,

141
00:07:08,430 --> 00:07:13,350
a whole bunch of things that you
can use that are super helpful.

142
00:07:13,350 --> 00:07:17,910
>> So in this example, this is an
object that represents any object.

143
00:07:17,910 --> 00:07:21,140
Or here we have a NSString,
which represents a string.

144
00:07:21,140 --> 00:07:24,430
It's sort of like how CS50
defined a string for you.

145
00:07:24,430 --> 00:07:28,350
The people that created Objective-C
defined a NSString for you.

146
00:07:28,350 --> 00:07:31,920
And NS is just the prefix
that they use to save it

147
00:07:31,920 --> 00:07:33,580
as something they created for you.

148
00:07:33,580 --> 00:07:35,070
It stands for next steps.

149
00:07:35,070 --> 00:07:39,210
>> And if you're interested, it has to
do with the history of Objective-C.

150
00:07:39,210 --> 00:07:42,770
And I think one of the first companies
to work with this was called NeXTSTEP.

151
00:07:42,770 --> 00:07:45,290

152
00:07:45,290 --> 00:07:48,022
And we'll talk about objects
and all that good stuff later.

153
00:07:48,022 --> 00:07:50,230
But basically it just means
this is an object for you

154
00:07:50,230 --> 00:07:51,620
to use that we've created.

155
00:07:51,620 --> 00:07:55,751
So there might be like NSNumber,
NSString, all that good stuff.

156
00:07:55,751 --> 00:07:56,250
Awesome.

157
00:07:56,250 --> 00:07:56,750
Yeah.

158
00:07:56,750 --> 00:07:59,430
And if any of you have
questions, just let me know.

159
00:07:59,430 --> 00:08:02,190

160
00:08:02,190 --> 00:08:02,820
>> Cool.

161
00:08:02,820 --> 00:08:03,320
OK.

162
00:08:03,320 --> 00:08:06,430
So that was a little bit about the IDE.

163
00:08:06,430 --> 00:08:10,480
Let's dive in and take a
look at what Objective-C is

164
00:08:10,480 --> 00:08:13,440
and how we use it to create apps.

165
00:08:13,440 --> 00:08:17,860
So the first thing is that you'll
notice on the left we have primarily two

166
00:08:17,860 --> 00:08:21,750
different types of files, .h's and .m's.

167
00:08:21,750 --> 00:08:26,270
And it's kind of like how in C,
we have two files, .h's and .c's.

168
00:08:26,270 --> 00:08:29,060
>> So just like before, the
.h is the header file.

169
00:08:29,060 --> 00:08:30,340
So we'll look at one of these.

170
00:08:30,340 --> 00:08:34,090
But the header file is something
that just basically warns

171
00:08:34,090 --> 00:08:36,390
the compiler of what's coming.

172
00:08:36,390 --> 00:08:37,789
Like hey, I have this object.

173
00:08:37,789 --> 00:08:40,143
And it has these methods
and these properties.

174
00:08:40,143 --> 00:08:42,309
That might not make too
much sense to you right now.

175
00:08:42,309 --> 00:08:46,020
But basically it's similar to how you
say like hey, I have these structs,

176
00:08:46,020 --> 00:08:48,280
or I have these functions in your .h.

177
00:08:48,280 --> 00:08:50,690
It's just declaring
ahead of time the sorts

178
00:08:50,690 --> 00:08:53,650
of things that you're going
to be using in your file.

179
00:08:53,650 --> 00:08:55,443
>> On the other hand, we have the .m's.

180
00:08:55,443 --> 00:08:57,660
And m is for implementation.

181
00:08:57,660 --> 00:09:02,280
So in a .m file, you actually
specify the logic of those functions.

182
00:09:02,280 --> 00:09:05,040
So whereas .h might say, I have
a function called my function,

183
00:09:05,040 --> 00:09:08,070
.m might say I have a
function called my function.

184
00:09:08,070 --> 00:09:12,030
And it does x, y, and zed by
manipulating these variables and such.

185
00:09:12,030 --> 00:09:13,950
That's the difference in .h and .m.

186
00:09:13,950 --> 00:09:19,030
And you'll notice that they appear
in pairs because every .m needs a .h

187
00:09:19,030 --> 00:09:24,420
to describe to the compiler what
sorts of things it will contain.

188
00:09:24,420 --> 00:09:25,590
>> Yeah.

189
00:09:25,590 --> 00:09:26,750
Perfect.

190
00:09:26,750 --> 00:09:30,360
So the language is called
Objective-C. What's

191
00:09:30,360 --> 00:09:32,100
the deal with this objective part?

192
00:09:32,100 --> 00:09:40,790
It turns out that C doesn't support
a very well-known part of programming

193
00:09:40,790 --> 00:09:43,820
in general, which is called
object-oriented programming.

194
00:09:43,820 --> 00:09:47,880
And object-oriented programming was
a revolution in computer science

195
00:09:47,880 --> 00:09:52,080
that started moving programmers to
thinking about programming the way we

196
00:09:52,080 --> 00:09:53,350
think about the world.

197
00:09:53,350 --> 00:09:56,600
And the way we think about the world is
that all around us are objects, right?

198
00:09:56,600 --> 00:09:57,266
I have a laptop.

199
00:09:57,266 --> 00:09:58,480
I have a table.

200
00:09:58,480 --> 00:10:00,990
Let's see if we can
program in that way where

201
00:10:00,990 --> 00:10:04,380
we describe all of the
objects that are interacting

202
00:10:04,380 --> 00:10:07,240
in our system in our application.

203
00:10:07,240 --> 00:10:09,660
And then describe the
types of things, the types

204
00:10:09,660 --> 00:10:13,880
of information that they store and
the types of things that they can do.

205
00:10:13,880 --> 00:10:19,130
>> So in Objective-C, those two things
are their properties and their methods.

206
00:10:19,130 --> 00:10:21,870
So in this example, I have a car.

207
00:10:21,870 --> 00:10:24,140
In real life, this is
the object, the car.

208
00:10:24,140 --> 00:10:29,100
What does a car look like if you were
to describe it in code as an object?

209
00:10:29,100 --> 00:10:31,120
So first of all, you
say, hey, I'm going to be

210
00:10:31,120 --> 00:10:33,160
describing this thing that's a car.

211
00:10:33,160 --> 00:10:35,950
And this car is a more
specific type of NSObject.

212
00:10:35,950 --> 00:10:38,800

213
00:10:38,800 --> 00:10:41,130
>> So first of all, there
are some properties.

214
00:10:41,130 --> 00:10:43,323
There's some information
that the car has.

215
00:10:43,323 --> 00:10:45,690
It has a brand which is a string.

216
00:10:45,690 --> 00:10:47,540
We talked about NS before.

217
00:10:47,540 --> 00:10:54,380
And that just means it's like the
normal string that they gave to us.

218
00:10:54,380 --> 00:10:55,300
It also has a make.

219
00:10:55,300 --> 00:10:59,480
So that might be like this is
if you have a Honda Odyssey,

220
00:10:59,480 --> 00:11:01,150
the Odyssey would be the make.

221
00:11:01,150 --> 00:11:03,240
And finally, it has
the speed which keeps

222
00:11:03,240 --> 00:11:05,660
track of how fast is
this car going right now.

223
00:11:05,660 --> 00:11:07,660
So those are all the
properties, the information

224
00:11:07,660 --> 00:11:09,540
that we need to know about the car.

225
00:11:09,540 --> 00:11:11,810
But cars aren't just
packets of information.

226
00:11:11,810 --> 00:11:12,950
They also do things.

227
00:11:12,950 --> 00:11:16,840
So these are methods or functions
that can act on this car.

228
00:11:16,840 --> 00:11:18,890
So for instance, we could say, hey car.

229
00:11:18,890 --> 00:11:21,480
I want you to start
driving at this speed.

230
00:11:21,480 --> 00:11:24,940
And so this is a function
that doesn't return anything.

231
00:11:24,940 --> 00:11:26,730
It just goes off and does something.

232
00:11:26,730 --> 00:11:29,530
But in order to start
driving at a certain speed,

233
00:11:29,530 --> 00:11:32,620
it has to know what speed you
want it to start driving at.

234
00:11:32,620 --> 00:11:36,860
>> So we pass in a float, the same
float that you guys are used to,

235
00:11:36,860 --> 00:11:38,530
which is called speed.

236
00:11:38,530 --> 00:11:42,030
And note that this is
an example in a .h file.

237
00:11:42,030 --> 00:11:44,860
And so you'll see that
all of this is just

238
00:11:44,860 --> 00:11:46,470
telling the methods that will exist.

239
00:11:46,470 --> 00:11:48,430
But it hasn't given the implementation.

240
00:11:48,430 --> 00:11:50,500
In the .m file, you could
go in and be like, OK,

241
00:11:50,500 --> 00:11:52,083
now I'm going to set my speed to this.

242
00:11:52,083 --> 00:11:54,500
And start the engine up, whatever.

243
00:11:54,500 --> 00:11:57,946
Then there could be another
method to stop driving.

244
00:11:57,946 --> 00:11:59,820
So those are the two
things that cars can do.

245
00:11:59,820 --> 00:12:00,445
They can start.

246
00:12:00,445 --> 00:12:01,500
And they can stop.

247
00:12:01,500 --> 00:12:05,180
And you can see how by defining
all sorts of these objects,

248
00:12:05,180 --> 00:12:08,890
we can represent super,
super complex things

249
00:12:08,890 --> 00:12:10,850
in a way that makes sense to people.

250
00:12:10,850 --> 00:12:13,225
That's good news, because
people are the one programming.

251
00:12:13,225 --> 00:12:18,390
So object-oriented programming is a
way to make very complex things much

252
00:12:18,390 --> 00:12:22,530
simpler by encapsulating
the method or the actions

253
00:12:22,530 --> 00:12:26,320
and information about an
object all in one file.

254
00:12:26,320 --> 00:12:30,370
>> So it's a great part of Objective-C. If
we tried to program for iPhones in C,

255
00:12:30,370 --> 00:12:33,789
it would be a nightmare, because
this sort of stuff is very hard in C.

256
00:12:33,789 --> 00:12:35,830
And that's why they created
a new language called

257
00:12:35,830 --> 00:12:40,120
Objective-C to accomplish
this sort of stuff.

258
00:12:40,120 --> 00:12:40,760
>> OK.

259
00:12:40,760 --> 00:12:45,890
So I said that, first of all, let's just
look a little bit more detail into what

260
00:12:45,890 --> 00:12:47,100
methods look like.

261
00:12:47,100 --> 00:12:49,760
So the first thing is
we have this minus.

262
00:12:49,760 --> 00:12:51,820
And then we see the return type.

263
00:12:51,820 --> 00:12:54,420
In my other example, that
return type was void,

264
00:12:54,420 --> 00:12:56,120
because it didn't return anything.

265
00:12:56,120 --> 00:12:59,460
Then we have the name of the method.

266
00:12:59,460 --> 00:13:03,430
>> And we have a whole bunch
of these pairs that say,

267
00:13:03,430 --> 00:13:06,010
this is the type of the
thing getting passed in.

268
00:13:06,010 --> 00:13:08,010
This is the name of the
thing getting passed in.

269
00:13:08,010 --> 00:13:10,830
So from now on, I'll be able
to refer to it as stringVar.

270
00:13:10,830 --> 00:13:14,120
And then you can have as many
of these pairs as you want,

271
00:13:14,120 --> 00:13:18,150
which say a little bit
of text and then the type

272
00:13:18,150 --> 00:13:23,910
and then the name of the variable, the
name that the variable will end up as.

273
00:13:23,910 --> 00:13:27,850
>> So if you wanted to look at
how this might be called,

274
00:13:27,850 --> 00:13:31,480
you would say if you have an actual
instance of the object, which

275
00:13:31,480 --> 00:13:38,420
means that so the car class is like
this high level idea of what a car is.

276
00:13:38,420 --> 00:13:40,400
It might be like the
blueprints of that car.

277
00:13:40,400 --> 00:13:42,400
It's just if we define
the class, then we

278
00:13:42,400 --> 00:13:46,470
say it is possible that a car
exists, whereas if we create a car,

279
00:13:46,470 --> 00:13:50,270
we create an instance of a car,
that's like a real physical car.

280
00:13:50,270 --> 00:13:54,130
It's like this car has this
make, this brand, and whatever.

281
00:13:54,130 --> 00:13:57,290
>> So if we go back to this
example, this is the class.

282
00:13:57,290 --> 00:14:02,820
But an instance is an actual
car that we've initialized

283
00:14:02,820 --> 00:14:04,540
and now we've given data to.

284
00:14:04,540 --> 00:14:06,599
Is that distinction clear?

285
00:14:06,599 --> 00:14:09,390
So you can have the class, which
is like the high-level blueprints.

286
00:14:09,390 --> 00:14:15,210
And then an instance, which is an actual
car that has all this stuff filled out.

287
00:14:15,210 --> 00:14:19,980
>> So in this example, we're saying,
I want you initialize this class.

288
00:14:19,980 --> 00:14:23,460
And now what all of this
returns is an actual instance.

289
00:14:23,460 --> 00:14:26,651
So instance is like an example
of a particular car with a make

290
00:14:26,651 --> 00:14:28,150
and a brand and all that good stuff.

291
00:14:28,150 --> 00:14:33,440
And so if you have an instance, you
can call an instance method on it.

292
00:14:33,440 --> 00:14:37,070
>> So it says, this is how we
call functions in Objective-C

293
00:14:37,070 --> 00:14:38,880
with the square brackets.

294
00:14:38,880 --> 00:14:42,450
So the thing that you're calling
the method on and then the method

295
00:14:42,450 --> 00:14:43,680
that you want to call.

296
00:14:43,680 --> 00:14:45,630
So the method is called
myMethodTakesAString.

297
00:14:45,630 --> 00:14:47,790
And then you give it the
string and then the rest

298
00:14:47,790 --> 00:14:50,894
of the name and the second parameter.

299
00:14:50,894 --> 00:14:52,060
So that's kind of confusing.

300
00:14:52,060 --> 00:14:53,590
That's new to you guys.

301
00:14:53,590 --> 00:14:57,410
You're used to writing the entire
method function name and then

302
00:14:57,410 --> 00:14:58,740
all the arguments.

303
00:14:58,740 --> 00:15:02,940
It's a design decision that they
decided to make in Objective-C that you

304
00:15:02,940 --> 00:15:05,730
actually intersperse the name
of the method with the things

305
00:15:05,730 --> 00:15:07,060
that you're passing in.

306
00:15:07,060 --> 00:15:10,291
>> So it's like a little bit of a name,
and then the thing you're passing in,

307
00:15:10,291 --> 00:15:12,290
more of the name of the
thing you're passing in.

308
00:15:12,290 --> 00:15:16,160
And so now stringVar will be Hello.

309
00:15:16,160 --> 00:15:20,523
And floatVar will be 1.5 as you go
in to actually implement this method.

310
00:15:20,523 --> 00:15:23,090

311
00:15:23,090 --> 00:15:25,770
>> I'll contrast that with a class method.

312
00:15:25,770 --> 00:15:29,580
So whereas an instance method, you call
on a particular instance of that car,

313
00:15:29,580 --> 00:15:34,330
it would only make sense to tell
a particular car to start or stop.

314
00:15:34,330 --> 00:15:38,140
But maybe there are methods that you
want to call on the entire class.

315
00:15:38,140 --> 00:15:40,950
For instance, class, tell
me what your name is.

316
00:15:40,950 --> 00:15:42,700
What is the name of this class?

317
00:15:42,700 --> 00:15:46,680
>> For that, it wouldn't make sense
to ask an individual car that.

318
00:15:46,680 --> 00:15:49,190
Instead we want to ask the blueprints.

319
00:15:49,190 --> 00:15:50,940
Blueprints, what's the
name of your class?

320
00:15:50,940 --> 00:15:52,106
And that would give us back.

321
00:15:52,106 --> 00:15:56,970
So basically, the plus
defines a class method.

322
00:15:56,970 --> 00:15:59,870
And so that means you call
it on the entire class,

323
00:15:59,870 --> 00:16:03,250
whereas a minus defines
an instance which

324
00:16:03,250 --> 00:16:05,820
you will call on a particular instance.

325
00:16:05,820 --> 00:16:08,150
This might be a little bit of a jump.

326
00:16:08,150 --> 00:16:10,800
And so this will probably
something that will get teased out

327
00:16:10,800 --> 00:16:12,900
as you start your tutorials.

328
00:16:12,900 --> 00:16:15,320
So don't get scared away by this.

329
00:16:15,320 --> 00:16:18,460
It's just like a little distinction
and a little better example

330
00:16:18,460 --> 00:16:23,930
of how we use methods in Objective-C.

331
00:16:23,930 --> 00:16:25,430
>> Cool.

332
00:16:25,430 --> 00:16:30,090
Another very important thing is your
favorite concept from this week's pset,

333
00:16:30,090 --> 00:16:31,241
Model-View-Controller.

334
00:16:31,241 --> 00:16:32,990
So it turns out that
Model-View-Controller

335
00:16:32,990 --> 00:16:37,070
isn't something that's specific
to CS50 Finance or to PHP.

336
00:16:37,070 --> 00:16:38,830
It's an idea in app creation.

337
00:16:38,830 --> 00:16:41,070
You guys are applying
it to web applications.

338
00:16:41,070 --> 00:16:44,830
But it turns out that in
most types of frameworks,

339
00:16:44,830 --> 00:16:48,240
they actually use MVC in
order to clarify the roles

340
00:16:48,240 --> 00:16:50,350
and responsibilities of each file.

341
00:16:50,350 --> 00:16:52,110
>> So just like you guys
have learned, there

342
00:16:52,110 --> 00:16:56,177
are three parts to an application,
a model, a controller, and a view.

343
00:16:56,177 --> 00:16:58,760
And hopefully you got a little
bit of an understanding of this

344
00:16:58,760 --> 00:16:59,900
from this week's pset.

345
00:16:59,900 --> 00:17:01,950
But I just want to
make this super clear,

346
00:17:01,950 --> 00:17:04,480
because in Objective-C
it becomes especially

347
00:17:04,480 --> 00:17:06,200
important to understand this concept.

348
00:17:06,200 --> 00:17:09,400
And hopefully this will help
you with your pset as well.

349
00:17:09,400 --> 00:17:13,220
>> So we have these three parts with the
controller being like the middleman.

350
00:17:13,220 --> 00:17:16,869
He's the guy in the middle
that does most of the thinking.

351
00:17:16,869 --> 00:17:21,099
So he is responsible
for taking, basically

352
00:17:21,099 --> 00:17:24,849
acting upon the request
that's made by the user.

353
00:17:24,849 --> 00:17:28,540
And so some things that he might
do are update or ask questions

354
00:17:28,540 --> 00:17:30,110
about the model.

355
00:17:30,110 --> 00:17:33,790
And then once he's done some thinking
about what he got back from the model,

356
00:17:33,790 --> 00:17:36,630
he'll update the view.

357
00:17:36,630 --> 00:17:40,840
>> So basically he's the guy in the middle
talking to both the model and the view.

358
00:17:40,840 --> 00:17:43,080
But note that there are
no connections here.

359
00:17:43,080 --> 00:17:45,410
The view never talks to
the model, because the view

360
00:17:45,410 --> 00:17:47,910
doesn't do any thinking.

361
00:17:47,910 --> 00:17:50,770
It's just like controller,
give me some information.

362
00:17:50,770 --> 00:17:51,890
And I'll display it.

363
00:17:51,890 --> 00:17:53,410
That's all I'm responsible for.

364
00:17:53,410 --> 00:17:55,290
I don't even know
anything about the model.

365
00:17:55,290 --> 00:17:58,210
I just know that I receive a
little bit of information on it.

366
00:17:58,210 --> 00:17:59,990
And I display it.

367
00:17:59,990 --> 00:18:02,600
>> And this is super important
to keep this distinction,

368
00:18:02,600 --> 00:18:04,900
because it simplifies our files a lot.

369
00:18:04,900 --> 00:18:08,500
Technically, you could implement
all of the MVC in one file.

370
00:18:08,500 --> 00:18:11,140
But that would lead to
super confusing code that

371
00:18:11,140 --> 00:18:14,760
doesn't run as fast as code like this.

372
00:18:14,760 --> 00:18:17,550
>> So an analogy, of course.

373
00:18:17,550 --> 00:18:20,150
So here we go.

374
00:18:20,150 --> 00:18:23,000
You walk up to Walmart or
to your favorite store.

375
00:18:23,000 --> 00:18:26,130
And there's lots of stuff going on.

376
00:18:26,130 --> 00:18:27,920
There is this guy who's greeting you.

377
00:18:27,920 --> 00:18:29,997
There is some mannequins
in the front window.

378
00:18:29,997 --> 00:18:31,830
And there's a guy with
a clipboard who knows

379
00:18:31,830 --> 00:18:36,827
everything there is to know about
what Walmart buys and sells.

380
00:18:36,827 --> 00:18:38,660
So this is really what
you're interested in.

381
00:18:38,660 --> 00:18:41,840
You don't want to see
this guy or this guy.

382
00:18:41,840 --> 00:18:47,140
You came here to look at mannequins and
try and decide what you want to buy.

383
00:18:47,140 --> 00:18:50,140
>> But if they only had one sort of
mannequin, that'd be crappy, right?

384
00:18:50,140 --> 00:18:53,390
So you could create a static website
that just had the same thing always.

385
00:18:53,390 --> 00:18:57,160
But you need these two in
order to make a dynamic.

386
00:18:57,160 --> 00:19:00,350
>> So the first thing you do is
walk up to the controller.

387
00:19:00,350 --> 00:19:05,740
And you say like hey, I am interested
in buying this sort of clothing.

388
00:19:05,740 --> 00:19:07,180
This is my size.

389
00:19:07,180 --> 00:19:13,460
And I'm specifically interested
in ordering a jacket.

390
00:19:13,460 --> 00:19:14,650
So he's like OK.

391
00:19:14,650 --> 00:19:16,860
I don't, I'm allowed to think a bunch.

392
00:19:16,860 --> 00:19:19,750
But I don't actually know
what we have in stock.

393
00:19:19,750 --> 00:19:24,620
So I'm going to go ask my friend the
model, who's going to give me back all,

394
00:19:24,620 --> 00:19:28,180
everything that he
knows about our jackets.

395
00:19:28,180 --> 00:19:30,460
>> So the model guy checks his clipboard.

396
00:19:30,460 --> 00:19:32,310
He sees that we have three jackets.

397
00:19:32,310 --> 00:19:36,747
And he tells the controller back,
here are the jackets we have on store.

398
00:19:36,747 --> 00:19:38,830
The controller isn't allowed
to show you anything.

399
00:19:38,830 --> 00:19:39,680
That's not his job.

400
00:19:39,680 --> 00:19:43,800
His job is to be the middleman
between the model and the view.

401
00:19:43,800 --> 00:19:45,880
So he doesn't directly show you them.

402
00:19:45,880 --> 00:19:49,327
He hands it over to the mannequin
guy or the mannequins themselves.

403
00:19:49,327 --> 00:19:50,410
Puts it on the mannequins.

404
00:19:50,410 --> 00:19:55,430
And the mannequins are the ones
that show you the final product.

405
00:19:55,430 --> 00:19:56,716
>> So he takes the jackets.

406
00:19:56,716 --> 00:19:58,590
He's the controller,
gives them to the views.

407
00:19:58,590 --> 00:20:00,220
They get all done up.

408
00:20:00,220 --> 00:20:03,590
And at the end of the day,
you see what you want to see.

409
00:20:03,590 --> 00:20:08,410
Similar to a website how this
guy takes what you have inputted,

410
00:20:08,410 --> 00:20:09,720
asks the model for them.

411
00:20:09,720 --> 00:20:11,820
And then eventually,
gives it to the view

412
00:20:11,820 --> 00:20:14,420
in order to be displayed on the screen.

413
00:20:14,420 --> 00:20:17,846
Hopefully that makes it a little bit
clearer for the pset and Objective-C,

414
00:20:17,846 --> 00:20:19,720
because for both of
them, it's very important

415
00:20:19,720 --> 00:20:21,540
that you know which files are which.

416
00:20:21,540 --> 00:20:23,310
>> You say is this file a controller?

417
00:20:23,310 --> 00:20:25,290
Am I putting view code in my controller?

418
00:20:25,290 --> 00:20:28,570
Or am I doing too much
thinking in my view?

419
00:20:28,570 --> 00:20:31,810
All of these will potentially
even lead to bugs,

420
00:20:31,810 --> 00:20:36,420
because Objective-C very
stringently enforces this principle.

421
00:20:36,420 --> 00:20:37,720
So basically, don't break MVC.

422
00:20:37,720 --> 00:20:40,010
It'll make your code
sad and possibly buggy.

423
00:20:40,010 --> 00:20:43,250

424
00:20:43,250 --> 00:20:43,760
>> Sweet.

425
00:20:43,760 --> 00:20:47,090
So that's a little bit about MVC.

426
00:20:47,090 --> 00:20:51,070
With that being said, let's
check out a code example.

427
00:20:51,070 --> 00:20:55,430
And so I don't want to get into
too much detail, because really,

428
00:20:55,430 --> 00:20:58,670
in order to learn this stuff, you
have to learn it from the ground up.

429
00:20:58,670 --> 00:21:01,160
And that's done by
checking out tutorials.

430
00:21:01,160 --> 00:21:04,490
But hopefully just by
looking at some examples,

431
00:21:04,490 --> 00:21:08,530
we can at least get a sense of what
the structure of these things are.

432
00:21:08,530 --> 00:21:10,170
>> So, I'll come over here.

433
00:21:10,170 --> 00:21:16,230

434
00:21:16,230 --> 00:21:19,170
We have lots of different
types of files in here.

435
00:21:19,170 --> 00:21:24,370
But luckily they line up pretty
nicely with the three parts of MVC

436
00:21:24,370 --> 00:21:26,050
that we talked about before.

437
00:21:26,050 --> 00:21:27,920
So one of them is the model.

438
00:21:27,920 --> 00:21:31,150
That's really nicely shown up.

439
00:21:31,150 --> 00:21:34,070
Those are like the two
different models that we have.

440
00:21:34,070 --> 00:21:37,890
They're the two different, you can think
of them as the two different databases

441
00:21:37,890 --> 00:21:39,530
that we have.

442
00:21:39,530 --> 00:21:44,150
>> So in your pset this week, you have a
users database, a portfolios database,

443
00:21:44,150 --> 00:21:47,550
and a history database, those
would be like your three models.

444
00:21:47,550 --> 00:21:49,740
There's three different
dudes with checkboards.

445
00:21:49,740 --> 00:21:51,640
And they know everything
there is to know

446
00:21:51,640 --> 00:21:53,310
about those three different things.

447
00:21:53,310 --> 00:21:55,320
Similarly here we have these files.

448
00:21:55,320 --> 00:22:01,790
And if we click into one, so
here we have ScaryBugData.

449
00:22:01,790 --> 00:22:02,640
So this is my class.

450
00:22:02,640 --> 00:22:05,480

451
00:22:05,480 --> 00:22:06,470
This is my class.

452
00:22:06,470 --> 00:22:09,220
You can see here that I've
defined it as an RWTScaryBugData.

453
00:22:09,220 --> 00:22:11,960

454
00:22:11,960 --> 00:22:17,860
>> And so like I said before, all classes
have things that they contain in them,

455
00:22:17,860 --> 00:22:20,740
as well things that they can do.

456
00:22:20,740 --> 00:22:25,280
Those are the two different
things that are in a bug data.

457
00:22:25,280 --> 00:22:26,850
What's some info that's in bug data?

458
00:22:26,850 --> 00:22:29,430
Well first, what's
the title of this bug?

459
00:22:29,430 --> 00:22:31,440
I guess I should explain
what this app does.

460
00:22:31,440 --> 00:22:35,270
It's the app that you
saw before which just

461
00:22:35,270 --> 00:22:37,290
is a list of all types of scary bugs.

462
00:22:37,290 --> 00:22:46,760

463
00:22:46,760 --> 00:22:52,750
>> So here we're going to end up displaying
the bugs with their pictures and stuff.

464
00:22:52,750 --> 00:22:57,820
So this class is going to encapsulate
just the text of this bug.

465
00:22:57,820 --> 00:23:02,270
So that includes what its name is, as
well as a rating of how scary it is.

466
00:23:02,270 --> 00:23:06,690
And one of the things that this data can
do, well, the one thing that it can do

467
00:23:06,690 --> 00:23:14,130
is it will get initialized with a
title and as well with a rating.

468
00:23:14,130 --> 00:23:18,320
>> So if we have an instance, an
empty instance of this data,

469
00:23:18,320 --> 00:23:20,180
we might want to
initialize it with data.

470
00:23:20,180 --> 00:23:24,050
And so we could pass in the
title and the rating in this way.

471
00:23:24,050 --> 00:23:28,995
So one way that this would get called
is so if I say RWTScaryBugData.

472
00:23:28,995 --> 00:23:34,460

473
00:23:34,460 --> 00:23:35,510
And then I do alloc.

474
00:23:35,510 --> 00:23:39,410
That just means give me an
empty instance of this class.

475
00:23:39,410 --> 00:23:41,770
So now we have an empty
instance of ScaryBugData.

476
00:23:41,770 --> 00:23:43,770
And we're ready to
start feeding it stuff.

477
00:23:43,770 --> 00:23:48,060
>> Well luckily we have a method on
this class that does exactly that.

478
00:23:48,060 --> 00:23:50,930
So we can say initWithTitle and string.

479
00:23:50,930 --> 00:23:52,850
What's the title that
we want to give it?

480
00:23:52,850 --> 00:23:57,710
We want to say that
it's a spooky spider.

481
00:23:57,710 --> 00:24:03,220
And its rating is going to be a
9.5 out of 10 on the spooky scale.

482
00:24:03,220 --> 00:24:06,970
So that example of how
we might use the init

483
00:24:06,970 --> 00:24:09,700
function in order to
actually pass in the data

484
00:24:09,700 --> 00:24:12,770
to initialize an instance
of the spooky spider.

485
00:24:12,770 --> 00:24:17,980
>> And so now we have an actual
instance of the class bug data, which

486
00:24:17,980 --> 00:24:22,350
represents something to do with a bug.

487
00:24:22,350 --> 00:24:23,420
Cool.

488
00:24:23,420 --> 00:24:26,190
For those of you curious,
this little at is just

489
00:24:26,190 --> 00:24:32,950
a quirk of Objective-C that means that I
want to create an instance of a string.

490
00:24:32,950 --> 00:24:35,530
So it's like a super
quick way of creating

491
00:24:35,530 --> 00:24:38,050
an actual object which is a string.

492
00:24:38,050 --> 00:24:41,700
Basically just remember
put at before your strings.

493
00:24:41,700 --> 00:24:47,800
>> Cool So I told you that
the .h is the header.

494
00:24:47,800 --> 00:24:49,860
And the .m is the implementation.

495
00:24:49,860 --> 00:24:53,700
So if we went into here, we'd expect to
see a little bit more of implementation

496
00:24:53,700 --> 00:24:55,080
as to what this stuff is.

497
00:24:55,080 --> 00:24:59,450
So you'll learn about this
stuff in tutorials hopefully.

498
00:24:59,450 --> 00:25:02,460
There's just something that you
have to remember to cut/paste.

499
00:25:02,460 --> 00:25:07,770
But what we do see is that
this function, this method,

500
00:25:07,770 --> 00:25:09,800
actually gets implemented.

501
00:25:09,800 --> 00:25:12,270
It says when somebody
calls this function, what

502
00:25:12,270 --> 00:25:14,250
do you want to have happen?

503
00:25:14,250 --> 00:25:17,020
>> And it turns out this is
what you want to have happen.

504
00:25:17,020 --> 00:25:19,500
In a init function,
it's fairly formulaic.

505
00:25:19,500 --> 00:25:23,770
But if you created your own function
that had your own custom behavior,

506
00:25:23,770 --> 00:25:26,290
the logic for what would
go in that function

507
00:25:26,290 --> 00:25:32,144
would be very similar to what you're
doing in C. It's exactly the same.

508
00:25:32,144 --> 00:25:33,060
You create a function.

509
00:25:33,060 --> 00:25:34,684
You want that function to do something.

510
00:25:34,684 --> 00:25:38,059
So in here you write
the Objective-C that

511
00:25:38,059 --> 00:25:40,850
would make it do that thing, which
will hopefully be clearer to you

512
00:25:40,850 --> 00:25:43,710
once you know Objective-C.

513
00:25:43,710 --> 00:25:44,520
>> Sweet.

514
00:25:44,520 --> 00:25:46,762
So these are examples of our models.

515
00:25:46,762 --> 00:25:47,720
What about controllers?

516
00:25:47,720 --> 00:25:49,140
What do controllers look like?

517
00:25:49,140 --> 00:25:52,690
So we have four files here
that say ViewController.

518
00:25:52,690 --> 00:25:57,350
And that's normally the suffix that
will go on any sort of controller.

519
00:25:57,350 --> 00:25:59,406
In Objective-C they're
called view controllers,

520
00:25:59,406 --> 00:26:02,280
which just kind of helps you to make
that connection between the view

521
00:26:02,280 --> 00:26:03,640
and the view controller.

522
00:26:03,640 --> 00:26:05,700
>> So let's check one out.

523
00:26:05,700 --> 00:26:09,060
So we have this guy called
MasterViewController.

524
00:26:09,060 --> 00:26:17,710
And his job is to be this big,
basically this entire view,

525
00:26:17,710 --> 00:26:21,620
the MasterViewController is the
thing that controls that view.

526
00:26:21,620 --> 00:26:25,890
So it's the one that does all the
thinking for that entire page.

527
00:26:25,890 --> 00:26:27,820
>> The other guy says DetailViewController.

528
00:26:27,820 --> 00:26:30,520
And he's the one that does
the thinking for this,

529
00:26:30,520 --> 00:26:33,130
because this is the
detail view, similarly

530
00:26:33,130 --> 00:26:36,400
to how you guys have a quote
controller for your quote page

531
00:26:36,400 --> 00:26:38,910
and a by controller for your by page.

532
00:26:38,910 --> 00:26:42,290
Each one gets a pair of
ViewController and View.

533
00:26:42,290 --> 00:26:46,070

534
00:26:46,070 --> 00:26:49,540
>> So this guy does lots of stuff.

535
00:26:49,540 --> 00:26:54,110
One method that you'll see over
and over again is the viewDidLoad.

536
00:26:54,110 --> 00:26:56,730
And this is sort of like
your int main function

537
00:26:56,730 --> 00:27:02,130
in Objective-C, which says
that the view did load, which

538
00:27:02,130 --> 00:27:03,870
means that I'm ready to start thinking.

539
00:27:03,870 --> 00:27:06,210
Basically I have this
empty view which I want

540
00:27:06,210 --> 00:27:09,473
you to start doing the thinking
for, start initializing stuff

541
00:27:09,473 --> 00:27:11,050
where it needs to be.

542
00:27:11,050 --> 00:27:13,690
And so it's sending you that
message that the view did load.

543
00:27:13,690 --> 00:27:16,290
And now you're ready
to do some thinking.

544
00:27:16,290 --> 00:27:19,940
>> So what does this guy
do when his view loads?

545
00:27:19,940 --> 00:27:23,620
He sets up the navigation bar,
which is this thing at the top.

546
00:27:23,620 --> 00:27:27,030
He adds a button to the navigation
bar, which is this little plus.

547
00:27:27,030 --> 00:27:29,490
And then he sets his
title to be Scary Bugs.

548
00:27:29,490 --> 00:27:33,370

549
00:27:33,370 --> 00:27:37,530
>> So without getting too nitty gritty,
there are a bunch of other methods

550
00:27:37,530 --> 00:27:40,970
that happen in this master
view controller that are

551
00:27:40,970 --> 00:27:44,220
fairly specific to this application.

552
00:27:44,220 --> 00:27:47,530
But what else can I
call your attention to?

553
00:27:47,530 --> 00:27:52,540
Another thing this view does is similar
to how your view or your controller,

554
00:27:52,540 --> 00:27:55,930
sorry, handles the user's responses.

555
00:27:55,930 --> 00:27:59,490
This is the function
that will respond when

556
00:27:59,490 --> 00:28:01,760
somebody clicks on a particular row.

557
00:28:01,760 --> 00:28:04,280
>> And in Objective-C,
that's called a segue.

558
00:28:04,280 --> 00:28:06,470
You're segueing from
one screen to another.

559
00:28:06,470 --> 00:28:09,200
So this says given
that somebody is trying

560
00:28:09,200 --> 00:28:12,910
to go from here to here,
what do you want me to do?

561
00:28:12,910 --> 00:28:17,350
So how can I prepare in order to go
from this stage to the next stage?

562
00:28:17,350 --> 00:28:20,950

563
00:28:20,950 --> 00:28:23,260
So that's an example of a controller.

564
00:28:23,260 --> 00:28:25,080
It's the one that does the thinking.

565
00:28:25,080 --> 00:28:27,400
>> And then finally, what
does the view look like?

566
00:28:27,400 --> 00:28:30,460
One really awesome
part about Objective-C

567
00:28:30,460 --> 00:28:32,900
is that views actually look like views.

568
00:28:32,900 --> 00:28:33,940
They're not code.

569
00:28:33,940 --> 00:28:35,490
In most cases, they're not code.

570
00:28:35,490 --> 00:28:38,960
They're actually pictures of how
you want to lay out your view.

571
00:28:38,960 --> 00:28:42,422
>> And so this is an example of what
the view looks like in this case.

572
00:28:42,422 --> 00:28:45,130
And they're actually called
storyboards, because it kind of tells

573
00:28:45,130 --> 00:28:48,240
a story of how somebody
goes through your app.

574
00:28:48,240 --> 00:28:51,220
So for very simple apps,
this works very well.

575
00:28:51,220 --> 00:28:53,850
So for example, here you can
see the table view, which

576
00:28:53,850 --> 00:28:56,295
is the list of all the different bugs.

577
00:28:56,295 --> 00:28:59,030

578
00:28:59,030 --> 00:29:02,360
It has this little arrow that says
that when somebody clicks on a cell,

579
00:29:02,360 --> 00:29:06,640
I want you to transition
to the detail view.

580
00:29:06,640 --> 00:29:09,242
>> So this is what your views look like.

581
00:29:09,242 --> 00:29:10,450
They're normally storyboards.

582
00:29:10,450 --> 00:29:13,570
There are other programmatic
ways to declare views as well.

583
00:29:13,570 --> 00:29:16,440
But if you're working
with a really simple app,

584
00:29:16,440 --> 00:29:18,070
a storyboard is the way to go.

585
00:29:18,070 --> 00:29:20,986
And support for this has gotten
really, really good in the last couple

586
00:29:20,986 --> 00:29:24,040
versions of Objective-C iOS.

587
00:29:24,040 --> 00:29:27,036
So that's an example of a view.

588
00:29:27,036 --> 00:29:30,570
Are there any questions about, is there
anything that you guys want to look at?

589
00:29:30,570 --> 00:29:33,755
Or any questions about
what's going on in, yeah?

590
00:29:33,755 --> 00:29:35,463
>> STUDENT: Can you change the view there?

591
00:29:35,463 --> 00:29:37,759
Or does it have to be within your file?

592
00:29:37,759 --> 00:29:38,550
ZACK CHAUVIN: Yeah.

593
00:29:38,550 --> 00:29:40,630
So the question is can
you change the view?

594
00:29:40,630 --> 00:29:42,820
So you can do all sorts
of stuff to this view.

595
00:29:42,820 --> 00:29:45,860
For instance, down here I have
a list of all sorts of stuff

596
00:29:45,860 --> 00:29:47,400
that I can add to the view.

597
00:29:47,400 --> 00:29:55,090
So say I want to always have a label in
the middle of this guy that says CS50.

598
00:29:55,090 --> 00:29:59,210
If we were to re-run it, then
CS50 would show up right there.

599
00:29:59,210 --> 00:30:03,160
So it's like a drag and drop type
deal where you lay everything out.

600
00:30:03,160 --> 00:30:06,310
>> And it also has this sweet
thing called auto layout,

601
00:30:06,310 --> 00:30:08,240
which means that as
you rotate your phone,

602
00:30:08,240 --> 00:30:11,816
it will automatically readjust to that.

603
00:30:11,816 --> 00:30:14,940
And that's the sort of stuff that would
be a nightmare to type out in code,

604
00:30:14,940 --> 00:30:21,170
but when you're just showing it on a
screen like this isn't so bad to do.

605
00:30:21,170 --> 00:30:24,310
And so it's basically like you
never have to write CSS again,

606
00:30:24,310 --> 00:30:29,330
which if you've written any CSS for this
pset, you should be really happy about.

607
00:30:29,330 --> 00:30:29,890
>> Cool.

608
00:30:29,890 --> 00:30:30,390
OK.

609
00:30:30,390 --> 00:30:32,285
So that's one way.

610
00:30:32,285 --> 00:30:34,410
And then another way is
there are programmatic ways

611
00:30:34,410 --> 00:30:36,640
to add things to views as well.

612
00:30:36,640 --> 00:30:41,590
So in you might have another
folder that's called views.

613
00:30:41,590 --> 00:30:45,600
And you can declare a
view just by writing out,

614
00:30:45,600 --> 00:30:47,010
I don't have any examples here.

615
00:30:47,010 --> 00:30:51,140
But there are ways in code to also
define what's going on here basically.

616
00:30:51,140 --> 00:30:54,000
So you might say add label to my
table view controller, something

617
00:30:54,000 --> 00:30:54,916
like that, table view.

618
00:30:54,916 --> 00:30:58,490

619
00:30:58,490 --> 00:30:59,210
>> Sweet.

620
00:30:59,210 --> 00:30:59,750
OK.

621
00:30:59,750 --> 00:31:02,040
So there is a little
example of the code.

622
00:31:02,040 --> 00:31:04,780

623
00:31:04,780 --> 00:31:17,540
Next up very simple, just
talking about some tips.

624
00:31:17,540 --> 00:31:20,890
And then we'll be done.

625
00:31:20,890 --> 00:31:25,470
So my biggest tip is
that if you try and jump

626
00:31:25,470 --> 00:31:29,690
right into making your final project
when you're learning a new technology,

627
00:31:29,690 --> 00:31:32,822
it very rarely works
out well, because as you

628
00:31:32,822 --> 00:31:35,030
may have seen with some of
your psets, the first time

629
00:31:35,030 --> 00:31:38,940
that you attempt anything, it
ends up being a little messy.

630
00:31:38,940 --> 00:31:42,740
>> And that's not so bad when the course of
what you're working on is just a week.

631
00:31:42,740 --> 00:31:45,690
But if you're trying to develop
this for your final project

632
00:31:45,690 --> 00:31:47,780
or beyond your final
project, it's important

633
00:31:47,780 --> 00:31:49,600
that you start your
project after you have

634
00:31:49,600 --> 00:31:51,420
a fair bit of knowledge of other thing.

635
00:31:51,420 --> 00:31:52,410
So it doesn't have to be huge.

636
00:31:52,410 --> 00:31:54,120
You don't have create
two final projects.

637
00:31:54,120 --> 00:31:56,980
But maybe find a tutorial
from one of the resources

638
00:31:56,980 --> 00:31:59,750
that I'll list at the end of
the thing that says create

639
00:31:59,750 --> 00:32:01,690
an example of a Twitter application.

640
00:32:01,690 --> 00:32:05,170
>> Or create an example,
even the scary bugs thing.

641
00:32:05,170 --> 00:32:07,450
If you implemented all
the scary bugs, that

642
00:32:07,450 --> 00:32:10,880
would be a great start so that when
you actually go to create your own,

643
00:32:10,880 --> 00:32:15,170
you aren't making the little mistakes or
ending up with all sorts of random code

644
00:32:15,170 --> 00:32:16,400
in your final project.

645
00:32:16,400 --> 00:32:19,520
Make a small app before you
jump into the final project.

646
00:32:19,520 --> 00:32:24,060
>> Next up we have use git to collaborate
with partners and save work.

647
00:32:24,060 --> 00:32:27,860
So git isn't something we've
talked a lot about in CS50.

648
00:32:27,860 --> 00:32:29,120
>> STUDENT: Is it like GitHub?

649
00:32:29,120 --> 00:32:31,000
>> ZACK CHAUVIN: It's sort of like GitHub.

650
00:32:31,000 --> 00:32:34,894
So what are git and GitHub?

651
00:32:34,894 --> 00:32:35,810
What's the difference?

652
00:32:35,810 --> 00:32:36,720
What do they do?

653
00:32:36,720 --> 00:32:42,172
So git is a way of saving
multiple versions of your files

654
00:32:42,172 --> 00:32:43,130
a whole bunch of times.

655
00:32:43,130 --> 00:32:46,260
So say you're working on an essay.

656
00:32:46,260 --> 00:32:50,440
The thing is you only ever
have one version of that essay.

657
00:32:50,440 --> 00:32:52,139
So if you type a whole bunch of stuff.

658
00:32:52,139 --> 00:32:54,180
And then you're like, oh,
I have this great idea.

659
00:32:54,180 --> 00:32:55,940
I'm going to add this whole paragraph.

660
00:32:55,940 --> 00:32:57,572
And I'm going to cut this
out and blah blah blah.

661
00:32:57,572 --> 00:32:59,067
And then you get to the end of it.

662
00:32:59,067 --> 00:32:59,900
And you're like, oh.

663
00:32:59,900 --> 00:33:03,270
I actually think I like my version
before better than this one.

664
00:33:03,270 --> 00:33:06,040
So then you just type
undo a million times.

665
00:33:06,040 --> 00:33:10,880
>> Basically what git does is it has
you save versions of your file,

666
00:33:10,880 --> 00:33:13,650
of your entire project, as you go along.

667
00:33:13,650 --> 00:33:16,720
So you might implement the
first part of your project.

668
00:33:16,720 --> 00:33:21,340
And then save a snapshot of
what your project is like then.

669
00:33:21,340 --> 00:33:23,740
So you can say, I just finished this.

670
00:33:23,740 --> 00:33:25,550
And all of this is working.

671
00:33:25,550 --> 00:33:27,270
And then a day later, come back.

672
00:33:27,270 --> 00:33:29,610
And you spend an entire
day working on it.

673
00:33:29,610 --> 00:33:32,540
And it turns out that
you broke some stuff.

674
00:33:32,540 --> 00:33:33,865
>> You don't know what's going on.

675
00:33:33,865 --> 00:33:36,490
If only you could go back to your
previous version or even just

676
00:33:36,490 --> 00:33:40,120
look at what your previous version was
to see what you're doing differently.

677
00:33:40,120 --> 00:33:42,870
Git will allow you to do all of that.

678
00:33:42,870 --> 00:33:44,410
>> And you mentioned GitHub.

679
00:33:44,410 --> 00:33:47,600
Git is also the way that you
collaborate with other people.

680
00:33:47,600 --> 00:33:51,740
So GitHub is this online thing that
requires that you're using git.

681
00:33:51,740 --> 00:33:54,730
And if you're using git
locally on your own laptop,

682
00:33:54,730 --> 00:33:59,300
then you can use GitHub,
which is like a cloud,

683
00:33:59,300 --> 00:34:02,190
like a storage space in
the cloud, so that you

684
00:34:02,190 --> 00:34:05,760
can push your stuff from your local
version of git onto the cloud.

685
00:34:05,760 --> 00:34:09,380
And then somebody else who also has
git can take what's on the cloud

686
00:34:09,380 --> 00:34:12,560
onto their machine, their local machine.

687
00:34:12,560 --> 00:34:16,219
>> So GitHub makes collaboration
via git possible.

688
00:34:16,219 --> 00:34:19,730
And so git has the two advantages
that it will prevent you

689
00:34:19,730 --> 00:34:22,320
from getting super
frustrated about not be

690
00:34:22,320 --> 00:34:25,719
able to go back to previous work,
which happens surprisingly often.

691
00:34:25,719 --> 00:34:29,120
And also it allow you to craft
collaborate with partners.

692
00:34:29,120 --> 00:34:32,520
Literally we see people like draw boxing
stuff back and forth to each other,

693
00:34:32,520 --> 00:34:35,580
which will make you very sad quickly.

694
00:34:35,580 --> 00:34:36,719
>> Git is the way to do it.

695
00:34:36,719 --> 00:34:38,949
It's specially created for programmers.

696
00:34:38,949 --> 00:34:41,889
And it has also awesome tools.

697
00:34:41,889 --> 00:34:43,730
There's probably a CS50 seminar on it.

698
00:34:43,730 --> 00:34:49,290
If not there's all sorts of
great resources online about git.

699
00:34:49,290 --> 00:34:49,790
OK.

700
00:34:49,790 --> 00:34:55,810
My final tip is to run your
code often to catch bugs early.

701
00:34:55,810 --> 00:34:59,970
This is really like a tip for any
sort of programming that you're doing.

702
00:34:59,970 --> 00:35:02,970
But it's especially important when
you're taking on a new technology,

703
00:35:02,970 --> 00:35:07,190
because if you make 10 minutes worth
of changes, and then you run it,

704
00:35:07,190 --> 00:35:12,490
and it's broken, you have much less idea
of what's broken if you were constantly

705
00:35:12,490 --> 00:35:13,810
running your programs.

706
00:35:13,810 --> 00:35:18,550
>> And even as somebody that's been
programming in Objective-C for a while,

707
00:35:18,550 --> 00:35:22,190
I find that if I wait too
long before running my code,

708
00:35:22,190 --> 00:35:24,560
it's not really clear where
the bug is coming from.

709
00:35:24,560 --> 00:35:26,200
So run your code often.

710
00:35:26,200 --> 00:35:30,990
And that will prevent frustrating
experiences later in the line.

711
00:35:30,990 --> 00:35:35,060
>> So what are some resources for you?

712
00:35:35,060 --> 00:35:39,560
This first and last one are great
resources online, raywenderlich

713
00:35:39,560 --> 00:35:40,370
as well as rypress.

714
00:35:40,370 --> 00:35:42,792
The example of scary bugs
came from raywenderlich.

715
00:35:42,792 --> 00:35:44,500
I'll be sending out
these slides as well.

716
00:35:44,500 --> 00:35:47,270
But you're welcome to
take them down now.

717
00:35:47,270 --> 00:35:49,130
So those are available online.

718
00:35:49,130 --> 00:35:53,360
And then the Stanford iOS course
is available through iTunes U.

719
00:35:53,360 --> 00:35:57,240
>> And that's actually
the course that I did.

720
00:35:57,240 --> 00:35:58,836
I worked in an iOS job this summer.

721
00:35:58,836 --> 00:35:59,710
And then I showed up.

722
00:35:59,710 --> 00:36:01,560
And I realized I knew nothing about iOS.

723
00:36:01,560 --> 00:36:03,610
And so I took this course
for like a couple days.

724
00:36:03,610 --> 00:36:08,520
And then I was ready to
jump into iOS development.

725
00:36:08,520 --> 00:36:13,740
>> So if you're dedicated to
using iOS for your project,

726
00:36:13,740 --> 00:36:17,430
then your best bet for sure is
to do one of these tutorials

727
00:36:17,430 --> 00:36:21,720
before you try anything else, because
it can be super frustrating to just poke

728
00:36:21,720 --> 00:36:26,630
around in Objective-C without really
knowing some of the fundamentals.

729
00:36:26,630 --> 00:36:29,950
>> So all of these are great resources.

730
00:36:29,950 --> 00:36:33,310
And I would probably recommend
the Stanford course the most,

731
00:36:33,310 --> 00:36:37,140
just because it's a professor.

732
00:36:37,140 --> 00:36:40,030
He's taught a lot about
this sort of stuff.

733
00:36:40,030 --> 00:36:43,780
And so it's a great resource.

734
00:36:43,780 --> 00:36:45,840
That's all I have to say
about Objective-C. Do

735
00:36:45,840 --> 00:36:48,070
you guys have any final questions?

736
00:36:48,070 --> 00:36:51,393
Or like we can also
talk about your ideas?

737
00:36:51,393 --> 00:36:53,118
Yeah?

738
00:36:53,118 --> 00:36:58,486
>> STUDENT: What other languages out
there for coding on app development?

739
00:36:58,486 --> 00:37:01,910
What are the benefits of Objective-C
over others or others over Objective-C?

740
00:37:01,910 --> 00:37:03,050
>> ZACK CHAUVIN: For sure.

741
00:37:03,050 --> 00:37:04,989
Is that specific to iPhone or?

742
00:37:04,989 --> 00:37:05,530
STUDENT: Yes.

743
00:37:05,530 --> 00:37:06,363
ZACK CHAUVIN: Sweet.

744
00:37:06,363 --> 00:37:11,740
So the question is what languages
are there for developing on a iPhone?

745
00:37:11,740 --> 00:37:16,000
So pretty much the only two
are Objective-C and Swift.

746
00:37:16,000 --> 00:37:23,010
And so my background is in Objective-C.
And so that's what I would push for.

747
00:37:23,010 --> 00:37:24,580
>> I talked a little bit about this.

748
00:37:24,580 --> 00:37:29,770
But it's basically just like
the more established language.

749
00:37:29,770 --> 00:37:31,120
It's been around for many years.

750
00:37:31,120 --> 00:37:33,850
Because of that, many people use it.

751
00:37:33,850 --> 00:37:39,680
And there's way more resources for
it, because it's been around longer.

752
00:37:39,680 --> 00:37:42,700
And it's also much more
similar to C than Swift.

753
00:37:42,700 --> 00:37:46,050
Swift is probably more like JavaScript.

754
00:37:46,050 --> 00:37:47,330
And it's much more common.

755
00:37:47,330 --> 00:37:50,650
>> Objective-C is much more common
in the industry than Swift

756
00:37:50,650 --> 00:37:52,920
for most the reasons that I said before.

757
00:37:52,920 --> 00:37:56,480
It's kind of like the legacy
language that people started using,

758
00:37:56,480 --> 00:37:59,950
as well that it's much more
better supported by resources.

759
00:37:59,950 --> 00:38:01,350
Swift's great as well.

760
00:38:01,350 --> 00:38:02,870
There are other tutorials.

761
00:38:02,870 --> 00:38:06,300
There are other CS50 tutorials on Swift.

762
00:38:06,300 --> 00:38:07,730
You're welcome to check those out.

763
00:38:07,730 --> 00:38:09,906
And make the decision for yourself.

764
00:38:09,906 --> 00:38:11,280
It's definitely where it's going.

765
00:38:11,280 --> 00:38:12,510
I'm not going to pretend
that Objective-C's

766
00:38:12,510 --> 00:38:14,040
going to be around forever.

767
00:38:14,040 --> 00:38:16,315
But it's a question of when
that switch will happen.

768
00:38:16,315 --> 00:38:19,420
But most people use Swift.

769
00:38:19,420 --> 00:38:20,235
Cool.

770
00:38:20,235 --> 00:38:22,970
Any other questions?

771
00:38:22,970 --> 00:38:23,470
Sweet.

772
00:38:23,470 --> 00:38:23,970
OK.

773
00:38:23,970 --> 00:38:25,200
So that's all I have.

774
00:38:25,200 --> 00:38:28,760
I'll stick around for a bit in case
you guys want to talk about your ideas

775
00:38:28,760 --> 00:38:30,200
or how feasible they are.

776
00:38:30,200 --> 00:38:31,680
But thanks a bunch for coming.

777
00:38:31,680 --> 00:38:34,330
And good luck with your projects.

778
00:38:34,330 --> 00:38:36,839
