1
00:00:00,000 --> 00:00:00,499


2
00:00:00,499 --> 00:00:02,090
ZAMYLA CHAN: Let's play a game.

3
00:00:02,090 --> 00:00:04,860
In the game of fifteen,
we have a tile set

4
00:00:04,860 --> 00:00:07,220
that we allow the user
to move around the tiles

5
00:00:07,220 --> 00:00:10,630
until the numbers are
arranged in the correct order.

6
00:00:10,630 --> 00:00:11,870
How do we do this?

7
00:00:11,870 --> 00:00:13,510
The game is a little involved.

8
00:00:13,510 --> 00:00:17,890
So in fifteen.c, you'll find
a lot of distribution code.

9
00:00:17,890 --> 00:00:22,280
In that distribution code, it accepts
and parses the command-line arguments,

10
00:00:22,280 --> 00:00:25,920
creates the board, and
then enters the game play

11
00:00:25,920 --> 00:00:30,130
by checking to see where the game is
won and exiting if it is, and otherwise,

12
00:00:30,130 --> 00:00:33,680
getting input from the user to
see which tile should be moved,

13
00:00:33,680 --> 00:00:35,610
and calling that function.

14
00:00:35,610 --> 00:00:37,720
So what do we actually have to do?

15
00:00:37,720 --> 00:00:41,610
Well, within fifteen.c, you'll
find calls to four functions--

16
00:00:41,610 --> 00:00:44,710
init, draw, move, and won.

17
00:00:44,710 --> 00:00:47,240
And that's our job to implement.

18
00:00:47,240 --> 00:00:51,640
Init stands for initialize, where
we initialize the 2D integer

19
00:00:51,640 --> 00:00:54,460
array that will represent our board.

20
00:00:54,460 --> 00:00:57,460
Now, this board is going
to be of dimensions d,

21
00:00:57,460 --> 00:01:02,870
given by the user, where that dimension
is less than the game's given maximum.

22
00:01:02,870 --> 00:01:07,099
We've encountered 1D arrays
already, so what are 2D arrays?

23
00:01:07,099 --> 00:01:08,640
Well, they're not all that different.

24
00:01:08,640 --> 00:01:11,770
We can just represent
2D arrays as grids.

25
00:01:11,770 --> 00:01:15,220
Here, I've initialized a
new 2D array called grid.

26
00:01:15,220 --> 00:01:18,860
You'll see that I put two indicators
for the dimension, as opposed

27
00:01:18,860 --> 00:01:21,000
to one in a one-dimensional array.

28
00:01:21,000 --> 00:01:24,120
So I'm going to declare every
single element of this grid

29
00:01:24,120 --> 00:01:31,610
explicitly, where grid 0, 0 is 8,
and grid 0, 1 is 7, grid 0, 2 is 6.

30
00:01:31,610 --> 00:01:34,990
You'll see that the indicator
for the row comes first,

31
00:01:34,990 --> 00:01:37,590
and then the index for
the column comes second.

32
00:01:37,590 --> 00:01:40,710
So now proceeding to the next
row, then the first index

33
00:01:40,710 --> 00:01:43,570
in all of my declarations
is going to be 1.

34
00:01:43,570 --> 00:01:49,840
So indeed, we have grid at 1, 0
set as 5, grid at 1, 1 set as 4,

35
00:01:49,840 --> 00:01:52,950
and grid at 1, 2 set to 3.

36
00:01:52,950 --> 00:01:58,600
Moving on to the last row, I have grid
at 2, 0 equal to 2, and grid at 2,

37
00:01:58,600 --> 00:02:00,600
1 equal to 1.

38
00:02:00,600 --> 00:02:03,170
Now, in the physical version
of the game of fifteen,

39
00:02:03,170 --> 00:02:07,910
it's actually made up of tiles, whereby
the player moves those tiles around

40
00:02:07,910 --> 00:02:12,830
in order to move the tiles
into correct descending order.

41
00:02:12,830 --> 00:02:16,160
So in our digital version
of the game of fifteen,

42
00:02:16,160 --> 00:02:19,430
we also want a blank
space for that user.

43
00:02:19,430 --> 00:02:22,190
So we're not going to
display a number there.

44
00:02:22,190 --> 00:02:26,370
But knowing that this is an integer
grid, we have to put an integer there.

45
00:02:26,370 --> 00:02:28,150
But we're not going to display it.

46
00:02:28,150 --> 00:02:31,780
So it's up to you to choose which
one makes most sense to you.

47
00:02:31,780 --> 00:02:36,520
So to recap, for initialize, we want
to initialize the board, a 2D integer

48
00:02:36,520 --> 00:02:39,760
array, with the starting state
of the game of fifteen board,

49
00:02:39,760 --> 00:02:45,320
where board at index i, j represents
the tile at row i and column j,

50
00:02:45,320 --> 00:02:49,330
and the numbers for these tiles start
in descending order-- left to right, top

51
00:02:49,330 --> 00:02:50,250
to bottom.

52
00:02:50,250 --> 00:02:52,450
So what does the pseudocode look like?

53
00:02:52,450 --> 00:02:57,380
Well, to iterate over the entire grid,
then for each row and each column,

54
00:02:57,380 --> 00:03:00,020
we want to set the value for the tile.

55
00:03:00,020 --> 00:03:03,090
It might look something like
this-- a nested for loop.

56
00:03:03,090 --> 00:03:07,040
Here, integer i iterates
over the rows, and integer j

57
00:03:07,040 --> 00:03:08,730
iterates over the columns.

58
00:03:08,730 --> 00:03:11,710
And within that, we
set the tile's value.

59
00:03:11,710 --> 00:03:14,630
Now, unfortunately, it's
not quite so simple.

60
00:03:14,630 --> 00:03:17,780
In order for the game of fifteen
to be completely winnable,

61
00:03:17,780 --> 00:03:20,760
then there are certain
cases with certain numbers

62
00:03:20,760 --> 00:03:26,230
of tiles when you actually have to
swap the 2 tile with the 1 tile.

63
00:03:26,230 --> 00:03:32,250
The rule is that whenever the
dimension, d, is even, you swap 2 and 1.

64
00:03:32,250 --> 00:03:36,140
So in the case that we already
talked about with d being 3,

65
00:03:36,140 --> 00:03:37,640
we don't need to worry about that.

66
00:03:37,640 --> 00:03:40,240
But when d is 4, for
instance, then we actually

67
00:03:40,240 --> 00:03:43,060
have to switch the 1 and the 2 tile.

68
00:03:43,060 --> 00:03:48,940
So make sure you include a case in
order to check whether d is even or not.

69
00:03:48,940 --> 00:03:50,100
I'll give you a hint.

70
00:03:50,100 --> 00:03:53,430
Modulo might come in handy.

71
00:03:53,430 --> 00:03:57,910
Now that we've initialized our board,
it's time to go on to drawing it.

72
00:03:57,910 --> 00:04:01,870
Now, if we follow the same pattern as
we did when we initialized the board,

73
00:04:01,870 --> 00:04:06,420
then we'll iterate over the board in the
same exact order as we initialized it.

74
00:04:06,420 --> 00:04:09,900
So let's iterate over the rows
first, and then the columns,

75
00:04:09,900 --> 00:04:12,210
and then print the tile's value.

76
00:04:12,210 --> 00:04:14,360
Now, since this is a
visual game, we want

77
00:04:14,360 --> 00:04:18,390
to make sure that the users can sort
of see where the tiles end and begin,

78
00:04:18,390 --> 00:04:20,140
and when the rows end and begin.

79
00:04:20,140 --> 00:04:23,230
So let's print a new line and
perhaps some other characters

80
00:04:23,230 --> 00:04:26,682
to indicate when tiles
and rows begin and end.

81
00:04:26,682 --> 00:04:28,640
We're almost done with
the draw function, which

82
00:04:28,640 --> 00:04:30,348
will print the current
state of the board

83
00:04:30,348 --> 00:04:32,280
whenever the draw function is called.

84
00:04:32,280 --> 00:04:34,680
All that's left is to
ensure proper formatting.

85
00:04:34,680 --> 00:04:37,520
So for this, we'd like
you to print a blank space

86
00:04:37,520 --> 00:04:39,370
before any single-digit numbers.

87
00:04:39,370 --> 00:04:42,160
That way, single-dingle numbers
and double-digit numbers

88
00:04:42,160 --> 00:04:44,060
will look the same.

89
00:04:44,060 --> 00:04:47,740
For this, all you have to do is
modify your original printf statement

90
00:04:47,740 --> 00:04:52,930
for printing an integer, except
instead of a %i, let's add a %2i.

91
00:04:52,930 --> 00:04:55,690
That way, we'll ensure
that a space is printed

92
00:04:55,690 --> 00:04:59,980
before any single-digit numbers,
and no space before a double digit.

93
00:04:59,980 --> 00:05:02,870
Then the very last thing
to do in this draw function

94
00:05:02,870 --> 00:05:07,730
is to make sure that the user can
visually see where the blank tile is.

95
00:05:07,730 --> 00:05:10,560
For this, we're representing
it with an underscore.

96
00:05:10,560 --> 00:05:13,060
The board is a 2D array of integers.

97
00:05:13,060 --> 00:05:15,860
And an underscore
definitely isn't an integer.

98
00:05:15,860 --> 00:05:18,210
So how do you reconcile the two?

99
00:05:18,210 --> 00:05:21,180
Well, I propose that as you're
iterating over your board

100
00:05:21,180 --> 00:05:24,350
and printing those values,
you include a condition where

101
00:05:24,350 --> 00:05:28,550
you make sure to print an underscore
on lieu of whatever other integer you

102
00:05:28,550 --> 00:05:32,290
stored in that blank tile location.

103
00:05:32,290 --> 00:05:36,800
So now that we've drawn our
board, it's time to move it.

104
00:05:36,800 --> 00:05:39,320
In move, you want to
implement the functionality

105
00:05:39,320 --> 00:05:44,290
where the user has already given you
the tile number, not the tile location.

106
00:05:44,290 --> 00:05:47,810
So your first job is to
find that tile location.

107
00:05:47,810 --> 00:05:52,080
Try to see if you can do this
in a nice, iterative manner.

108
00:05:52,080 --> 00:05:56,130
So then next, we want to edit the
board array to move that tile,

109
00:05:56,130 --> 00:05:58,320
but only if the move is legal.

110
00:05:58,320 --> 00:06:00,770
A legal move in the game
of fifteen is to move

111
00:06:00,770 --> 00:06:03,020
any tile that's above,
below, to the left,

112
00:06:03,020 --> 00:06:05,530
or to the right of the blank tile.

113
00:06:05,530 --> 00:06:09,820
So in this case, the 8, the 5, and
the 2 are all legal tiles to move,

114
00:06:09,820 --> 00:06:12,730
but not the 7, because that
one's diagonal to the blank.

115
00:06:12,730 --> 00:06:16,610
Once we found that, we swap
the tile and the blank tile.

116
00:06:16,610 --> 00:06:20,270
So even though we searched
for that 8 tile before,

117
00:06:20,270 --> 00:06:22,770
we're always going to
need that blank tile.

118
00:06:22,770 --> 00:06:26,690
So I suggest that you keep
track of where the blank is

119
00:06:26,690 --> 00:06:29,680
using two nicely named variables.

120
00:06:29,680 --> 00:06:30,440
Great.

121
00:06:30,440 --> 00:06:34,120
So now the user can
move any valid tiles.

122
00:06:34,120 --> 00:06:38,960
The last thing to do is to check to
see whether they've won the game.

123
00:06:38,960 --> 00:06:42,360
The fifteen.c file calls won.

124
00:06:42,360 --> 00:06:46,380
And won returns true if the game
is won, and false otherwise.

125
00:06:46,380 --> 00:06:48,550
The rule for the game
of 15 is that the game

126
00:06:48,550 --> 00:06:53,490
is won when the tiles are in increasing
order left to right, top to bottom.

127
00:06:53,490 --> 00:06:55,310
So how do we check this?

128
00:06:55,310 --> 00:06:59,130
Well, let's iterate over the
board and check each value.

129
00:06:59,130 --> 00:07:02,200
And if any value is incorrect,
then we'll return false.

130
00:07:02,200 --> 00:07:04,770
And then the user has to
keep on playing the game.

131
00:07:04,770 --> 00:07:08,890
But once we've checked all the
values, then we'll return true.

132
00:07:08,890 --> 00:07:11,590
The user has won, and so
have you, because you've

133
00:07:11,590 --> 00:07:13,970
completed the game of fifteen.

134
00:07:13,970 --> 00:07:18,190
My name is Zamyla, and this was fifteen.

135
00:07:18,190 --> 00:07:19,808