1
00:00:00,000 --> 00:00:00,560


2
00:00:00,560 --> 00:00:04,180
ZAMYLA CHAN: Let's enlarge
our C repertoire with resize.

3
00:00:04,180 --> 00:00:07,780
In resize, we're given an
infile bitmap, and our job

4
00:00:07,780 --> 00:00:14,340
is to create an outfile file that scales
that bitmap by n, a user-given number.

5
00:00:14,340 --> 00:00:16,920
OK, so let's break this down.

6
00:00:16,920 --> 00:00:21,110
Today, we'll talk about how to open
the in-file, then create an outfile

7
00:00:21,110 --> 00:00:24,140
and update that outfile's
header information.

8
00:00:24,140 --> 00:00:28,370
Then we'll read into the infile
scan line, pixel by pixel,

9
00:00:28,370 --> 00:00:30,910
resizing horizontally as we go.

10
00:00:30,910 --> 00:00:33,380
It's going to be really
important to talk about padding

11
00:00:33,380 --> 00:00:37,890
and understand exactly where to put
it in, and when to skip over it.

12
00:00:37,890 --> 00:00:42,150
Finally, we'll talk about resizing
the file vertically, as well.

13
00:00:42,150 --> 00:00:45,660
Now this is a lot to do, but luckily,
we have a good starting point,

14
00:00:45,660 --> 00:00:50,140
because copy.c actually implements
a lot of this functionality.

15
00:00:50,140 --> 00:00:54,510
Copy.c will open a file, update
the header information, then

16
00:00:54,510 --> 00:00:58,540
it will read each scanline--
pixel by pixel from the infile--

17
00:00:58,540 --> 00:01:02,380
and then write those pixels
into the outfile scanline.

18
00:01:02,380 --> 00:01:06,770
So even though it doesn't
necessarily resize the file for us,

19
00:01:06,770 --> 00:01:08,880
it's a great place to start.

20
00:01:08,880 --> 00:01:13,960
So let's copy the code
from copy.c into resize.c.

21
00:01:13,960 --> 00:01:16,250
All right, so now that
we've done that, we

22
00:01:16,250 --> 00:01:18,810
want to update the outfile
header information.

23
00:01:18,810 --> 00:01:21,240
So let's talk about bitmaps for a sec.

24
00:01:21,240 --> 00:01:25,280
Bitmaps are simply an arrangement
of bytes, just like any other file

25
00:01:25,280 --> 00:01:26,370
you'll encounter.

26
00:01:26,370 --> 00:01:29,870
It's just a matter of how we
interpret this arrangement of bytes.

27
00:01:29,870 --> 00:01:33,590
So take a peek inside
bmp.h for more information.

28
00:01:33,590 --> 00:01:36,720
With a resize bitmap, we'll
have an updated header.

29
00:01:36,720 --> 00:01:38,590
So what's changing in the header?

30
00:01:38,590 --> 00:01:41,610
Well, our file size is
changing, our image size,

31
00:01:41,610 --> 00:01:45,580
and of course, the width
and height of our file.

32
00:01:45,580 --> 00:01:47,710
So what are those variables, exactly?

33
00:01:47,710 --> 00:01:50,300
Well, within the bitmap
info header, we have

34
00:01:50,300 --> 00:01:52,450
biWidth, which indicates
the width of the image

35
00:01:52,450 --> 00:01:54,850
in pixels, not including padding.

36
00:01:54,850 --> 00:01:56,810
More on padding in a sec.

37
00:01:56,810 --> 00:01:59,910
Then we also have
biHeight, which represents

38
00:01:59,910 --> 00:02:02,680
the height of the image in pixels.

39
00:02:02,680 --> 00:02:06,060
Last in the bitmap in full
header we have the biSizeImage,

40
00:02:06,060 --> 00:02:11,390
which is the total size of the image
in bytes, including pixels and padding.

41
00:02:11,390 --> 00:02:14,930
Then we move to the bitmap file
header, where bfSize includes

42
00:02:14,930 --> 00:02:17,440
the total size of the file in bytes.

43
00:02:17,440 --> 00:02:20,730
So this includes pixels,
padding, and the headers.

44
00:02:20,730 --> 00:02:23,500
So the bfSize can be
calculated by adding

45
00:02:23,500 --> 00:02:26,170
the size of the image from
the bitmap info header,

46
00:02:26,170 --> 00:02:30,760
and adding that to the size
of those headers in bytes.

47
00:02:30,760 --> 00:02:34,860
OK, so when we scale the
image by n, what's changing?

48
00:02:34,860 --> 00:02:37,450
Well, pretty obviously,
the width and the height

49
00:02:37,450 --> 00:02:39,800
are both going to be scaled by n.

50
00:02:39,800 --> 00:02:43,780
But what's happening to
biSizeImage, and bfSize?

51
00:02:43,780 --> 00:02:46,520
Up to you to figure that out.

52
00:02:46,520 --> 00:02:50,990
So now that we've dealt with the header,
let's start looking at the pixels.

53
00:02:50,990 --> 00:02:54,570
So to read into the
infile scanline, copy.c

54
00:02:54,570 --> 00:02:58,640
calls the function fread,
which takes in four parameters.

55
00:02:58,640 --> 00:03:01,900
The first is a pointer to the struct
that will contain the bytes that you're

56
00:03:01,900 --> 00:03:05,720
reading, and then the size
of each element to read,

57
00:03:05,720 --> 00:03:09,550
then the number of those elements to
read, followed by the file pointer

58
00:03:09,550 --> 00:03:11,980
that you want to read those from.

59
00:03:11,980 --> 00:03:15,100
So now that we know how to read
into the scanline for the infile,

60
00:03:15,100 --> 00:03:16,970
let's talk about resizing.

61
00:03:16,970 --> 00:03:20,490
We're going to tackle
resizing horizontally first.

62
00:03:20,490 --> 00:03:24,810
For this, essentially what we need
to do is for each pixel in the row,

63
00:03:24,810 --> 00:03:27,270
we want to write it n times.

64
00:03:27,270 --> 00:03:32,240
So for an n of 2, I'll go to my
orange pixel and write that twice.

65
00:03:32,240 --> 00:03:35,450
Then proceed to my red
pixel, write that twice.

66
00:03:35,450 --> 00:03:39,370
And finally my blue pixel,
I'll write twice, as well.

67
00:03:39,370 --> 00:03:44,760
We call upon the function fwrite to
write those pixels into our outfile.

68
00:03:44,760 --> 00:03:47,350
Fwrite takes in four
parameters-- the pointer

69
00:03:47,350 --> 00:03:50,170
to the struct that contains
the bytes you're reading from,

70
00:03:50,170 --> 00:03:53,170
then the size and number of
the elements you want to write,

71
00:03:53,170 --> 00:03:59,120
and finally, the destination of
those files as a file pointer.

72
00:03:59,120 --> 00:04:01,850
Now that we've talked about
resizing horizontally,

73
00:04:01,850 --> 00:04:04,420
it's time to get to the padding.

74
00:04:04,420 --> 00:04:08,720
In a bitmap, each pixel is
represented with three bytes.

75
00:04:08,720 --> 00:04:11,430
Now the length of each
scanline of a bitmap

76
00:04:11,430 --> 00:04:14,040
must be a multiple of four bytes.

77
00:04:14,040 --> 00:04:16,839
Now, if the number of pixels
is not a multiple of four,

78
00:04:16,839 --> 00:04:21,220
then we'll need to include padding,
where padding its just zeroes.

79
00:04:21,220 --> 00:04:24,640
Here's an example where
I have four RGBtriples.

80
00:04:24,640 --> 00:04:26,930
Each triple is comprised of three bytes.

81
00:04:26,930 --> 00:04:30,780
So four triples, three bytes
each, that's equal to 12 bytes.

82
00:04:30,780 --> 00:04:35,000
Because that's a multiple of
four, I don't need any padding.

83
00:04:35,000 --> 00:04:39,300
Now say I have five
RGBtriples-- five triples times

84
00:04:39,300 --> 00:04:41,610
three bytes each equals 15.

85
00:04:41,610 --> 00:04:43,160
Not a multiple of four.

86
00:04:43,160 --> 00:04:45,880
So I need to add one
unit of padding in order

87
00:04:45,880 --> 00:04:49,240
to reach a multiple of four bytes.

88
00:04:49,240 --> 00:04:51,820
If I have, say, six
triples, then I'll need

89
00:04:51,820 --> 00:04:54,900
to add padding, as well, but a
different amount than last time.

90
00:04:54,900 --> 00:04:57,290
In this case, two zeroes.

91
00:04:57,290 --> 00:05:02,950
Finally, in this example, if I have
three triples, than 3 times 3 is 9.

92
00:05:02,950 --> 00:05:08,270
So in order to bump it up, I need
to add three units of padding.

93
00:05:08,270 --> 00:05:11,100
It's really important to
understand the concept of padding.

94
00:05:11,100 --> 00:05:14,110
Don't worry about the equation,
I've provided it here,

95
00:05:14,110 --> 00:05:17,500
and you can also find it in
the problem specification.

96
00:05:17,500 --> 00:05:21,250
You'll notice that the padding takes
into account the size of an RGBtriple,

97
00:05:21,250 --> 00:05:26,810
as well as the width of the image
in pixels, found in the bi header.

98
00:05:26,810 --> 00:05:30,450
Because we're resizing the
outfile, the outfile and the infile

99
00:05:30,450 --> 00:05:32,040
will have different widths.

100
00:05:32,040 --> 00:05:34,910
So the padding will most
likely be different.

101
00:05:34,910 --> 00:05:38,840
The other important fact to remember is
that padding isn't an RGBtriple-- so we

102
00:05:38,840 --> 00:05:42,240
won't be f-reading, or f-writing it in.

103
00:05:42,240 --> 00:05:45,870
Instead, to write padding,
will use the fputc function,

104
00:05:45,870 --> 00:05:49,900
which takes in a character to write, and
then the file pointer to write it to.

105
00:05:49,900 --> 00:05:55,530
So in this case, we'll be putting in
a 0 for the padding into our outfile.

106
00:05:55,530 --> 00:05:59,010
Let's look at an example using
any n equals 2 for simplicity.

107
00:05:59,010 --> 00:06:01,600
At the first pixel, we'll
resize horizontally,

108
00:06:01,600 --> 00:06:04,350
so we'll write that
twice into the outfile.

109
00:06:04,350 --> 00:06:07,670
Moving on to the second triple,
we'll also write that twice,

110
00:06:07,670 --> 00:06:09,510
resizing horizontally.

111
00:06:09,510 --> 00:06:12,680
Now you'll notice here that while
the infile requires padding,

112
00:06:12,680 --> 00:06:14,200
the outfile doesn't.

113
00:06:14,200 --> 00:06:18,840
The infile only has two pixels,
which results in six bytes--

114
00:06:18,840 --> 00:06:22,240
so it needs two units of padding
to reach a multiple of four

115
00:06:22,240 --> 00:06:23,430
bytes for the scanline.

116
00:06:23,430 --> 00:06:27,540
Whereas, the outfile has
four triples, so that

117
00:06:27,540 --> 00:06:30,290
results in a multiple of
four bytes for that scanline

118
00:06:30,290 --> 00:06:32,080
without needing any padding.

119
00:06:32,080 --> 00:06:34,110
The key takeaway here
is that the padding

120
00:06:34,110 --> 00:06:37,550
may very well be different
from the infile to the outfile.

121
00:06:37,550 --> 00:06:39,360
Looking back to the
equation for padding,

122
00:06:39,360 --> 00:06:42,390
we know that this
depends on the biWidth.

123
00:06:42,390 --> 00:06:46,090
But recall from earlier, we
know that biWidth is going

124
00:06:46,090 --> 00:06:48,490
to be changing from the old to the new.

125
00:06:48,490 --> 00:06:51,420
So perhaps we need to
calculate how the padding is

126
00:06:51,420 --> 00:06:57,360
going to change, but also keep track
of both the old and the new padding.

127
00:06:57,360 --> 00:07:00,390
With that said, let's go
back to some pseudocode code.

128
00:07:00,390 --> 00:07:03,750
Now this is pseudocode code just
for resizing horizontally-- it's

129
00:07:03,750 --> 00:07:08,420
not going to be the final
algorithm for your entire problem.

130
00:07:08,420 --> 00:07:12,740
But to resize horizontally for each
row, and for each pixel in the row,

131
00:07:12,740 --> 00:07:16,270
we want to write to the outfile n times.

132
00:07:16,270 --> 00:07:20,440
Then we want to write the outfiles
padding, once we finish that row.

133
00:07:20,440 --> 00:07:23,270
But then skip over the
infiles padding so that we

134
00:07:23,270 --> 00:07:26,200
reach the next row in the infile.

135
00:07:26,200 --> 00:07:30,450
Try to see if you can implement resize
by simply stretching by n horizontally

136
00:07:30,450 --> 00:07:31,270
first.

137
00:07:31,270 --> 00:07:34,720
Then we can move on to
resizing vertically.

138
00:07:34,720 --> 00:07:37,690
In resize, every pixel
is repeated n times.

139
00:07:37,690 --> 00:07:40,700
That's the horizontal
resizing component.

140
00:07:40,700 --> 00:07:44,270
But then every row is
also repeated n times.

141
00:07:44,270 --> 00:07:47,740
So say I have an n of
three, and a single pixel.

142
00:07:47,740 --> 00:07:51,770
Than that pixel is going to be
repeated three times in a row,

143
00:07:51,770 --> 00:07:55,880
then that row is going to be
repeated three times, as well.

144
00:07:55,880 --> 00:07:59,440
All right, so now let's move on to
a more complex example with more

145
00:07:59,440 --> 00:08:01,590
than one pixel needed to resize.

146
00:08:01,590 --> 00:08:05,650
I'll go to my first pixel and write
that twice, then go to the next,

147
00:08:05,650 --> 00:08:08,740
write that twice, and then
the third, write that twice.

148
00:08:08,740 --> 00:08:12,400
We've already achieved this
by resizing horizontally.

149
00:08:12,400 --> 00:08:16,510
Resizing vertically entails
repeating that process another time,

150
00:08:16,510 --> 00:08:18,840
so that we've repeated the row twice.

151
00:08:18,840 --> 00:08:22,330
Only then will we move on to
the next row in the infile,

152
00:08:22,330 --> 00:08:25,680
and repeat that same process.

153
00:08:25,680 --> 00:08:29,150
There are two overarching methods
in which you can resize vertically,

154
00:08:29,150 --> 00:08:33,780
and even within those methods, there
are multiple options for implementation.

155
00:08:33,780 --> 00:08:36,679
So the first type of
method is a rewrite method,

156
00:08:36,679 --> 00:08:40,510
in which you remember the pixels
that need to be written in the array,

157
00:08:40,510 --> 00:08:43,510
and then write that array
as many times as needed.

158
00:08:43,510 --> 00:08:46,590
Or there's the recopy
method, in which you go back

159
00:08:46,590 --> 00:08:52,250
to the start of the original scanline,
and recopy that line as necessary.

160
00:08:52,250 --> 00:08:54,990
I've mentioned a couple times
now seeking back or skipping

161
00:08:54,990 --> 00:08:57,190
forward padding, lines, et cetera.

162
00:08:57,190 --> 00:09:01,430
What I mean by this, is that we need
to move the file position indicator.

163
00:09:01,430 --> 00:09:03,420
The file position
indicator is essentially

164
00:09:03,420 --> 00:09:06,810
a cursor-- whenever
you fread into a file,

165
00:09:06,810 --> 00:09:10,710
there is a cursor that keeps track
of where you are in that file.

166
00:09:10,710 --> 00:09:13,190
If you ever want to
move that, then you call

167
00:09:13,190 --> 00:09:17,630
upon fseek-- which takes in the
file pointer that you're seeking in,

168
00:09:17,630 --> 00:09:20,500
the number of bytes that you
want to move the cursor, and then

169
00:09:20,500 --> 00:09:24,330
finally, whether or not you want to
move relative to the current position

170
00:09:24,330 --> 00:09:28,550
in the file, the beginning
of the file, or the end.

171
00:09:28,550 --> 00:09:30,620
Now that you're equipped
with fseek, we can

172
00:09:30,620 --> 00:09:33,350
talk about pseudocode
for the rewrite method.

173
00:09:33,350 --> 00:09:35,660
Now remember that even
within the rewrite method,

174
00:09:35,660 --> 00:09:37,770
there are multiple
ways to implement this.

175
00:09:37,770 --> 00:09:40,020
So your pseudocode in
your implementation

176
00:09:40,020 --> 00:09:43,580
might very well be different than mine,
and that's OK-- as long as it works,

177
00:09:43,580 --> 00:09:45,990
and the basic premise is the same.

178
00:09:45,990 --> 00:09:49,070
That for each row, we're going
to make a copy of the array

179
00:09:49,070 --> 00:09:54,060
that we want to write, then for n times,
we'll write that array to the outfile,

180
00:09:54,060 --> 00:09:56,040
and write the outfile padding.

181
00:09:56,040 --> 00:09:59,300
Once we're done, we'll fseek
over the infile padding,

182
00:09:59,300 --> 00:10:01,970
and then repeat for the next row.

183
00:10:01,970 --> 00:10:03,930
Now we come to the recopy method.

184
00:10:03,930 --> 00:10:08,600
In the recopy method, the infile cursor
starts at the beginning of a row.

185
00:10:08,600 --> 00:10:13,460
Then for n minus 1 times, we'll want
to write the pixel scaling horizontally

186
00:10:13,460 --> 00:10:17,340
to the outfile, and adding the
padding to the outfile as necessary.

187
00:10:17,340 --> 00:10:20,970
Then once we've written that,
we'll send the infile cursor back

188
00:10:20,970 --> 00:10:24,380
to the beginning of the row,
and repeat that process.

189
00:10:24,380 --> 00:10:29,170
After we've done that n minus 1 times,
then we'll write the pixels once more,

190
00:10:29,170 --> 00:10:32,230
scaling horizontally, adding
padding to the outfile.

191
00:10:32,230 --> 00:10:37,020
Only then will we skip over the infile
padding, bringing us to the next row,

192
00:10:37,020 --> 00:10:39,180
ready to repeat the process.

193
00:10:39,180 --> 00:10:43,310
We're in the homestretch-- so let's just
wrap up and summarize, and make sure

194
00:10:43,310 --> 00:10:45,120
that we're on the same page.

195
00:10:45,120 --> 00:10:48,400
We want to open the infile
and create an outfile,

196
00:10:48,400 --> 00:10:51,450
updating the outfile's header
information appropriately,

197
00:10:51,450 --> 00:10:55,790
and keeping track of whichever
variables we need to from the infile.

198
00:10:55,790 --> 00:10:58,630
Then, we'll read into
that infile scanline pixel

199
00:10:58,630 --> 00:11:03,630
by pixel, resizing horizontally,
remembering to add padding,

200
00:11:03,630 --> 00:11:05,630
and resizing vertically.

201
00:11:05,630 --> 00:11:09,340
Now, I admit, my own code
didn't work perfectly

202
00:11:09,340 --> 00:11:11,090
the first time that I tried resize.

203
00:11:11,090 --> 00:11:12,910
And yours might not, either.

204
00:11:12,910 --> 00:11:16,020
So if that happens, make
sure to put pen to paper,

205
00:11:16,020 --> 00:11:20,460
draw out your pixels-- perhaps
a simple smiley, or just a box--

206
00:11:20,460 --> 00:11:23,480
and follow through your own code
to make sure that the logic works.

207
00:11:23,480 --> 00:11:25,800
And you might find your bug that way.

208
00:11:25,800 --> 00:11:27,110
Good luck.

209
00:11:27,110 --> 00:11:31,530
My name is Zamyla and this was resize.

210
00:11:31,530 --> 00:11:33,230