1
00:00:00,000 --> 00:00:00,499


2
00:00:00,499 --> 00:00:05,210
ZAMYLA CHAN: Our challenge for sort
is to implement a sort in O of n time.

3
00:00:05,210 --> 00:00:06,600
How might we do this?

4
00:00:06,600 --> 00:00:08,880
Well, counting sort is one such example.

5
00:00:08,880 --> 00:00:12,530
Counting sort will use key
values as indices for an array

6
00:00:12,530 --> 00:00:16,700
and then uses that array to determine
the positions for the final array.

7
00:00:16,700 --> 00:00:18,970
Now, counting sort does
depend on the assumption

8
00:00:18,970 --> 00:00:21,890
that we have a known and
finite range of numbers

9
00:00:21,890 --> 00:00:25,280
and that that range
isn't terribly large.

10
00:00:25,280 --> 00:00:28,150
So counting sort ultimately
takes place in big O of n

11
00:00:28,150 --> 00:00:31,300
plus k time, which resolves to O of n.

12
00:00:31,300 --> 00:00:32,759
Let's look at an example.

13
00:00:32,759 --> 00:00:34,610
Here I have an array of five integers.

14
00:00:34,610 --> 00:00:38,070
And I know that my random integer
generator only generates numbers

15
00:00:38,070 --> 00:00:40,800
from 0 all the way to 6, inclusive.

16
00:00:40,800 --> 00:00:43,500
So I generate a counting
array, which will

17
00:00:43,500 --> 00:00:47,230
count the number of entries for every
single integer within this range.

18
00:00:47,230 --> 00:00:50,180
So I start at the very
first element of this array.

19
00:00:50,180 --> 00:00:51,890
And I have the number 3.

20
00:00:51,890 --> 00:00:56,000
So then I go to index 3 of my
counting array, and then I put a 1

21
00:00:56,000 --> 00:00:57,620
there at that element.

22
00:00:57,620 --> 00:01:02,520
I then go to the next element in
my array, 6, so I go to index 6

23
00:01:02,520 --> 00:01:04,450
and I put a 1 there.

24
00:01:04,450 --> 00:01:07,490
Progressing to the third element
of the array, I have the number 1.

25
00:01:07,490 --> 00:01:12,110
So following this pattern, I go to index
number 1 and I increment the count.

26
00:01:12,110 --> 00:01:16,380
So then, when I get to the fourth
element and I have the number 1,

27
00:01:16,380 --> 00:01:19,100
I go to index 1 and I
simply increment the count,

28
00:01:19,100 --> 00:01:23,340
indicating that so far I've
found two ones in my array.

29
00:01:23,340 --> 00:01:26,600
So finally, after we
increment the count at 3,

30
00:01:26,600 --> 00:01:29,740
we have enough information
in this counting array

31
00:01:29,740 --> 00:01:34,270
to be able to fill in our original
array in incrementing order.

32
00:01:34,270 --> 00:01:36,900
But I'll leave that to
you to figure that out.

33
00:01:36,900 --> 00:01:41,170
My name is Zamyla, and this was fun.

34
00:01:41,170 --> 00:01:42,561